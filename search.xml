<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Charles抓包+Postman模拟请求]]></title>
    <url>%2FCharles%E6%8A%93%E5%8C%85%2BPostman%E6%A8%A1%E6%8B%9F%E8%AF%B7%E6%B1%82.html</url>
    <content type="text"><![CDATA[一、工具介绍1. Charles今天来介绍一下Mac上抓包工具Charles(又称为青花瓷)，官网可以下载，但是需要破解之后才能永久使用，当然，可以有30天试用期，具体的使用方法在此就不进行一一介绍了，如有需要再补上。（ps:破解版下载地址密码:meuk)。 2.PostmanPostman是一种网页调试与发送网页http请求的chrome插件。我们可以用来很方便的模拟get或者post或者其他方式的请求来调试接口。点击下载 二、开始抓取网络接口以及模拟请求第一步、打开Charles,在浏览器中输入需要请求的地址，我这里访问的是一个投票的接口显示信息如下：cookie信息：参数信息： 第二步、在第一步获取了请求的url、cookie、参数等请求需要的之后我们就可以打开Postman来进行模拟请求了。配置信息如下：body参数：第三步、发送请求，看到后台返回的信息到这里这个请求接口的操作就模拟成功了，既然参数和地址都有了，这个时候就是你想做什么就做什么的时候了，你懂得😆。 这是根据postman请求结果，自己随便写了个手机端来进行请求的，有兴趣的可以一起研究，欢迎骚扰。]]></content>
      <categories>
        <category>IT技能</category>
      </categories>
      <tags>
        <tag>抓包</tag>
        <tag>Charles</tag>
        <tag>Postman</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Reveal---iOS项目UI调试工具使用教程]]></title>
    <url>%2FReveal---iOS%E9%A1%B9%E7%9B%AEUI%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.html</url>
    <content type="text"><![CDATA[一、Reveal介绍 Reveal是Mac os平台上的一款开发者调试IOS应用的Mac[开发软件]reveal Mac版它能够在运行时调试和修改iOS应用程序。Reveal能连接到应用程序，并允许开发者编辑各种用户界面参数，这反过来会立即反应在程序的UI上。Reveal 在 官网售价119美元，约合人民币1280元]，（文末会给出破解版的下载地址，当然，要支持正版哟^_^）。 二、Reveal集成使用1、下载安装Reveal，直接安装。如果提示xxx.app文件损坏打不开，请参考我的另一篇文章解决，这里了就不多说了。 2、找到你刚才安装的软件,打开主界面显示如下图 3、在你的项目中集成（1）创建一个名为RevealTestDemo的项目,导入CocoPods,打开Podfile文件输入12// :configurations =&gt; [&apos;Debug&apos;] 只是在xcode debug 时才会加入；pod &apos;Reveal-SDK&apos;, :git =&gt; &apos;https://git.coding.net/kakukeme/Reveal-SDK.git&apos;, :configurations =&gt; [&apos;Debug&apos;] （2）、Xcode打开项目，并运行 在界面上添加一个背景颜色为红色的label,这个时候打开Reveal,你就能看到点击进入就能看到 4、功能分析窗口介绍点击一个控件之后进入这个子控件的详细信息 在属性窗口里面我们能很清晰的看见这个控件的相关信息，包括Frame等，同时你还可以直接在属性面板进行修改控件的信息 修改前修改后 是不是很方便，修改字体、颜色、大小、对齐方式等都可以在属性面板进行操作，很直观的看到修改后的效果，不幸的是，你项目中的代码还需要自己去修改（据说后期版本会有对这一方面的修改，期待ing）。本文Demo地址,Reveal下载地址]]></content>
  </entry>
  <entry>
    <title><![CDATA[UITableViewCell上的输入框，输入不同内容]]></title>
    <url>%2FUITableViewCell%E4%B8%8A%E7%9A%84%E8%BE%93%E5%85%A5%E6%A1%86%EF%BC%8C%E8%BE%93%E5%85%A5%E4%B8%8D%E5%90%8C%E5%86%85%E5%AE%B9.html</url>
    <content type="text"><![CDATA[一、实现效果本文介绍怎么在UITableViewCell中添加输入框，对于不同的row的输入框输入的文本进行获取以至于打到一个表单填写的效果。 二、项目结构 三、代码部分1. 项目使用Cocoapods管理 在控制台对创建的项目进行创建pods，创建Podfile文件，使用命令vi Podfile进入到Podfile文件里面，按下键盘i进入编辑状态 输入我们需要使用的第三方库，此项目中使用了Masonry来进行适配 1234platform :ios, &apos;8.0&apos;target &apos;InputInfoDemo&apos; dopod &apos;Masonry&apos;end 在写好上一步的代码后，按ESC,然后输入:wq回车退出编辑状态 使用命令pod instal进行第三方库安装，当出现以下内容的时候表示你已经装好Masonry了######2.创建需要显示的自定义UITableViewCell**.h文件**1234567891011121314151617181920212223//// InputStrTableViewCell.h//// Created by Jackeroo on 2017/5/27.// Copyright © 2017年 Jackeroo. All rights reserved.//#import &lt;UIKit/UIKit.h&gt;@interface InputStrTableViewCell : UITableViewCell@property (nonatomic, strong) UITextField *textField;/** 设置cell信息 @param title cell左侧标题 @param desc 占位文字信息 @param type 键盘类型 0、表示正常键盘 1、表示数字键盘 @param text 填充文字 @param textFieldBlock 输入内容回调 */-(void)setCellInfo:(NSString*)title withInputDesc:(NSString*)desc withKeybordType:(NSInteger )type withText:(NSString *)text WithReturnBlock:(void (^)(NSString *result))textFieldBlock;@end **.m文件**123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121//// InputStrTableViewCell.m//// Created by Jackeroo on 2017/5/27.// Copyright © 2017年 Jackeroo. All rights reserved.//// 颜色#define RGBA(r,g,b,a) [UIColor colorWithRed:(r)/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:a]#import &quot;InputStrTableViewCell.h&quot;#import &quot;Masonry.h&quot;#import &quot;View+MASShorthandAdditions.h&quot;@interface InputStrTableViewCell()&lt;UITextFieldDelegate&gt;// 标题Label@property (nonatomic, strong) UILabel *titleLabel;@end@implementation InputStrTableViewCell&#123;// 输入回调 void (^_block)(NSString *inputResult);&#125;- (void)awakeFromNib &#123; [super awakeFromNib]; // Initialization code&#125;// 初始化- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier &#123; self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]; if (self) &#123; self.backgroundColor =RGBA(242, 242, 242, 1); self.selectionStyle = UITableViewCellSelectionStyleNone; self.titleLabel = [[UILabel alloc] init]; self.titleLabel.font =[UIFont systemFontOfSize:14]; self.titleLabel.textColor = [UIColor blackColor]; self.textField = [[UITextField alloc] init]; self.textField.font = [UIFont systemFontOfSize:12]; self.textField.textColor = [UIColor grayColor]; self.textField.textAlignment = NSTextAlignmentRight; self.textField.delegate = self; self.textField.backgroundColor = [UIColor whiteColor]; self.textField.clearButtonMode = UITextFieldViewModeAlways; // 添加输入完成会回调通知 [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(textFieldChanging:) name:UITextFieldTextDidChangeNotification object:self.textField]; [self addSubview]; [self autoLayout]; CGFloat scale = [[UIScreen mainScreen] scale]; CGFloat width = scale &gt; 0.0 ? 1.0 / scale : 1.0; self.layer.borderWidth = width; self.layer.borderColor = [UIColor lightGrayColor].CGColor; &#125; return self;&#125;- (void)setFrame:(CGRect)frame&#123; frame.origin.y -= 0.5;//整体向上 移动0.5 frame.size.height += 0.5;//间隔为0.5 [super setFrame:frame];&#125;/** * 添加页面 */-(void)addSubview&#123; [self.contentView addSubview:self.titleLabel]; [self.contentView addSubview:self.textField];&#125;/** * 页面自动适配 */-(void) autoLayout&#123; [self.titleLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123; make.leading.offset(12.5); make.centerY.equalTo(self.contentView.mas_centerY); make.width.equalTo(@100); make.trailing.equalTo(self.textField.mas_leading).offset(-10); &#125;]; [self.textField mas_makeConstraints:^(MASConstraintMaker *make) &#123; make.centerY.equalTo(self.contentView.mas_centerY); make.trailing.offset(-10); make.leading.equalTo(self.titleLabel.mas_trailing).offset(10); make.top.offset(10); make.bottom.offset(-10); &#125;];&#125;- (void)dealloc&#123; [[NSNotificationCenter defaultCenter] removeObserver:self name:UITextFieldTextDidChangeNotification object:nil];&#125;-(void)textFieldChanging:(id)sender&#123; if (_block) &#123; _block(self.textField.text); &#125;&#125;-(void)setCellInfo:(NSString*)title withInputDesc:(NSString*)desc withKeybordType:(NSInteger)type withText:(NSString *)text WithReturnBlock:(void (^)(NSString *))textFieldBlock&#123; if (type==1) &#123; self.textField.keyboardType = UIKeyboardTypeNumberPad; &#125; _textField.text =text; _textField.clearButtonMode = UITextFieldViewModeWhileEditing; _block = textFieldBlock; _titleLabel.text = title; _textField.placeholder = desc;&#125;- (void)setSelected:(BOOL)selected animated:(BOOL)animated &#123; [super setSelected:selected animated:animated]; // Configure the view for the selected state&#125;@end 3.创建一个Info对象模型，存入所填写的内容123456789101112#import &lt;Foundation/Foundation.h&gt;@interface Info : NSObject@property (nonatomic,copy) NSString *name1;@property (nonatomic,copy) NSString *name2;@property (nonatomic,copy) NSString *name3;@property (nonatomic,copy) NSString *name4;@property (nonatomic,copy) NSString *name5;@property (nonatomic,copy) NSString *name6;@property (nonatomic,copy) NSString *name7;@end 4.使用方法123456789101112131415161718192021222324252627282930313233343536373839404142-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123; NSString *identifier = [NSString stringWithFormat:@&quot;InputStrTableViewCellIdentifier%ld&quot;,indexPath.row]; InputStrTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier]; if (!cell) &#123; cell =[[InputStrTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifier]; Info *info = [[Info alloc] init]; if (indexPath.row==0) &#123; [cell setCellInfo:@&quot;配偶信息：&quot; withInputDesc:info.name1&gt;0?info.name1:@&quot;请输入配偶信息&quot; withKeybordType:0 withText:@&quot;&quot; WithReturnBlock:^(NSString *result) &#123; info.name1 =result; &#125;]; &#125;else if (indexPath.row==1)&#123; [cell setCellInfo:@&quot;身份证：&quot; withInputDesc:info.name2&gt;0?info.name2:@&quot;请输入身份证号码&quot; withKeybordType:1 withText:@&quot;&quot; WithReturnBlock:^(NSString *result) &#123; info.name2 =result; &#125;]; &#125;else if (indexPath.row==2)&#123; [cell setCellInfo:@&quot;单位名称：&quot; withInputDesc:info.name3&gt;0?info.name3:@&quot;请输入单位名称&quot; withKeybordType:0 withText:@&quot;&quot; WithReturnBlock:^(NSString *result) &#123; info.name3 =result; &#125;]; &#125;else if (indexPath.row==3)&#123; [cell setCellInfo:@&quot;所在部门：&quot; withInputDesc:info.name4&gt;0?info.name4:@&quot;请输入所在部门&quot; withKeybordType:0 withText:@&quot;&quot; WithReturnBlock:^(NSString *result) &#123; info.name4 =result; &#125;]; &#125;else if (indexPath.row==4)&#123; [cell setCellInfo:@&quot;月均工资收入：&quot; withInputDesc:info.name5&gt;0?info.name5:@&quot;请输入月均工资收入&quot; withKeybordType:1 withText:@&quot;&quot; WithReturnBlock:^(NSString *result) &#123; info.name5 =result; &#125;]; &#125;else if (indexPath.row==5)&#123; [cell setCellInfo:@&quot;办公室电话：&quot; withInputDesc:info.name6&gt;0?info.name6:@&quot;请输入办公室电话&quot; withKeybordType:1 withText:@&quot;&quot; WithReturnBlock:^(NSString *result) &#123; info.name6 =result; &#125;]; &#125;else&#123; [cell setCellInfo:@&quot;移动电话：&quot; withInputDesc:info.name7&gt;0?info.name1:@&quot;请输入移动电话&quot; withKeybordType:1 withText:@&quot;&quot; WithReturnBlock:^(NSString *result) &#123; info.name7 =result; &#125;]; &#125; &#125; return cell;&#125; 注：只是粗糙的实现了功能，还有部分可优化的，代码已上传Github,喜欢的欢迎star一下，以资鼓励，嘿嘿， git地址 。]]></content>
      <tags>
        <tag>UITableView</tag>
        <tag>Cocoapods</tag>
        <tag>cell</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UITableViewCell高度自适应--Xib和Masonry布局]]></title>
    <url>%2FUITableViewCell%E9%AB%98%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94--Xib%E5%92%8CMasonry%E5%B8%83%E5%B1%80.html</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[iOS微信支付工具类]]></title>
    <url>%2FWeiXinPayService.html</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[Xcode9-Safe-Area-Layout-Guide-Before-iOS9-0报错解决]]></title>
    <url>%2FXcode9-Safe-Area-Layout-Guide-Before-iOS9-0%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3.html</url>
    <content type="text"><![CDATA[9月20日苹果爸爸推送了iOS11.0以及Xcode9,作为开发小白一枚，第一时间更新了Xcode9,去体验一下所谓的跨时代的iPhone X,像往常新建个新项目，结果一运行直接报错（弱弱的说一句，这个xcode9好像并没有那么友好~）然后一Google，苹果爸爸在苹果在iOS7中引入的Top Layout Guide和Bottom Layout Guide,这些布局指南在iOS 11中被弃用，取而代之的是Safe Area Layout Guide.针对新特性，解决方案如下第一步、在项目报错地方打开右边工具栏找到如图位置选中View Controller，去掉Use Safe Area Layout Guides 第二步、切换到Main.storyboard文件,重读第一步操作打开右边工具栏找到如图位置选中View Controller，去掉Use Safe Area Layout Guides 到这就解决了这个问题，当然iOS11和Xcode9还有其他新特性，一点点整理解决。]]></content>
      <categories>
        <category>Xcode</category>
      </categories>
      <tags>
        <tag>Xcode</tag>
        <tag>自适应</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xxx.app文件已损坏，打不开，解决方案]]></title>
    <url>%2Fxxx-app%E6%96%87%E4%BB%B6%E5%B7%B2%E6%8D%9F%E5%9D%8F%EF%BC%8C%E6%89%93%E4%B8%8D%E5%BC%80%EF%BC%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html</url>
    <content type="text"><![CDATA[现在很多软件是收费的，对于像我等穷屌丝来说，自然是想去找个破解的软件来替代，这个时候遇到xxx.app文件已损坏，打不开的情况，要怎么办呢，别急，以下操作就可以完美解决你的问题。 在Mac OS 更新到10.12之后，苹果爸爸对软件安全更加注重，在10.12之后你将看不到任何来源这个选项了 那么，我们在Mac OS 10.12之后要怎么才能显示这个任何来源的选项呢，其实很简单，你只需要在终端里输入sudo spctl --master-disable 这个时候会提示你输入电脑密码，（你输入的会不显示出来）输入密码后点击回车键，这个时候就打开了 这个时候，点击左下角的🔐,会让你输入电脑密码之后就可以选择任何来源了 点击允许任何来源这个时候你就可以打开之前提示文件损坏的软件了。]]></content>
  </entry>
  <entry>
    <title><![CDATA[iOS上如何使用Iconfont图标]]></title>
    <url>%2FiOS%E4%B8%8A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Iconfont%E5%9B%BE%E6%A0%87.html</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
</search>
