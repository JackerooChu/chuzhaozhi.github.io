<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JackerooChu的博客</title>
  
  <subtitle>一个iOS小白的技术积累</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chuzhaozhi.cn/"/>
  <updated>2018-11-16T03:03:16.776Z</updated>
  <id>http://chuzhaozhi.cn/</id>
  
  <author>
    <name>JackerooChu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Adobe Zii 4.0.4 Adobe系列软件激活工具 mac版</title>
    <link href="http://chuzhaozhi.cn/1.html"/>
    <id>http://chuzhaozhi.cn/1.html</id>
    <published>2018-11-16T02:59:56.533Z</published>
    <updated>2018-11-16T03:03:16.776Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/4905848-881029aca2d9b5cc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>今天带来Adobe家族产品全系激活工具。</p><p><img src="http://upload-images.jianshu.io/upload_images/4905848-1d781f5708b394d1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>先去Adobe的官网下载所需要的软件进行安装，建议先安装Adobe Creative Cloud管理软件工具</p><p><img src="http://upload-images.jianshu.io/upload_images/4905848-240e3e939d77bef6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>安装所需要的文件，正常安装即可。打开软件测试一下</p><p><img src="http://upload-images.jianshu.io/upload_images/4905848-ff8842bc90e322c9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>不做任何操作，退出PhotoShop CC软件，打开激活软件</p><p><img src="http://upload-images.jianshu.io/upload_images/4905848-4b0d5cf1bc5e28d3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>点击PATCH OR DRAG按钮</p><p><img src="http://upload-images.jianshu.io/upload_images/4905848-37a13dd881b13c5f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>该工具会自动扫描电脑上安装的Adobe家族的软件，扫描结束之后会列出来激活的软件</p><p><img src="http://upload-images.jianshu.io/upload_images/4905848-5b1793783f51302c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>需要获取到电脑的管理员权限，点击OK按钮输入电脑密码即可，然后就开始激活操作了，如图</p><p><img src="http://upload-images.jianshu.io/upload_images/4905848-691a7a1e07719747?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>等待自动激活操作完成后，出现如下界面就完成了所有的激活工作</p><p><img src="http://upload-images.jianshu.io/upload_images/4905848-61f290887a5a4062?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>至此已经激活了电脑上所有的Adobe系列软件，打开PhotoShop CC测试</p><p><img src="http://upload-images.jianshu.io/upload_images/4905848-70675cfa49b41f5f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>已经完美打开，正常使用啦~~~</p><p>文件获取方式</p><p>扫描二维码或者搜索<code>JackerooChu</code></p><p><img src="http://upload-images.jianshu.io/upload_images/4905848-274584d37d0550d6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image" title="undefined"></p><p><strong>长按二维码回复：Adobe</strong></p><p><strong>长按二维码回复：Adobe</strong></p><p><strong>长按二维码回复：Adobe</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4905848-881029aca2d9b5cc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=
      
    
    </summary>
    
    
      <category term="工具" scheme="http://chuzhaozhi.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>iOS独立开发者使用Bmob第三方后台服务之用户管理</title>
    <link href="http://chuzhaozhi.cn/1636968213.html"/>
    <id>http://chuzhaozhi.cn/1636968213.html</id>
    <published>2018-11-15T05:09:11.629Z</published>
    <updated>2018-11-15T05:10:38.671Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/4905848-460fe21f4b32d1d4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="一、属性"><a href="#一、属性" class="headerlink" title="一、属性"></a>一、属性</h2><p>BmobUser除了从BmobObject继承的属性外，还有几个特定的属性：</p><ul><li>username: 用户的用户名（必需）。</li><li>password: 用户的密码（必需）。</li><li><p>email: 用户的电子邮件地址（可选）。</p><p>BmobUser自动处理用户账户管理所需的功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-(void)setUsername:(NSString *)username;//用户名，必需</span><br><span class="line">-(void)setPassword:(NSString*)password;//密码，必需</span><br><span class="line">-(void)setEmail:(NSString *)email;//设置邮箱</span><br><span class="line">-(void)setObject:(id)obj forKey:(id)key;//设置某个属性的值</span><br><span class="line">-(id)objectForKey:(id)key;//得到某个属性的值</span><br></pre></td></tr></table></figure></li></ul><h2 id="二、注册"><a href="#二、注册" class="headerlink" title="二、注册"></a>二、注册</h2><p>应用很常见的一个功能就是，注册用户，使用BmobUser注册用户也不复杂，如下的例子所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">BmobUser *bUser = [[BmobUser alloc] init];</span><br><span class="line">   [bUser setUsername:self.nameTextField.text];</span><br><span class="line">   [bUser setPassword:self.passwordTextField.text];</span><br><span class="line">   [bUser signUpInBackgroundWithBlock:^ (BOOL isSuccessful, NSError *error)&#123;</span><br><span class="line">       if (isSuccessful)&#123;</span><br><span class="line">           NSLog(@&quot;Sign up successfully&quot;);</span><br><span class="line">           NSString *result = [NSString stringWithFormat:@&quot;注册成功\n用户名:%@\n密码:%@\n去试试登录吧&quot;,self.nameTextField.text,self.passwordTextField.text];</span><br><span class="line">           [self showResultInfo:result];</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           NSLog(@&quot;%@&quot;,error);</span><br><span class="line">           [self showResultInfo:@&quot;注册失败，查看控制台信息&quot;];</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;];</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/4905848-48f818b2c3f4c855.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p><strong>注意点</strong>：</p><ul><li>有些时候你可能需要在用户注册时发送一封邮件，以确认用户邮箱的真实性。这时，你只需要登录自己的应用管理后台，在应用设置-&gt;邮件设置（下图）中把“邮箱验证”功能打开，Bmob云后端就会在用户注册时自动发动一封验证给用户。<br><img src="https://upload-images.jianshu.io/upload_images/4905848-574b07e694f3d13e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li></ul></blockquote><ul><li><p>username字段是大小写敏感的字段，如果你希望应用的用户名不区分大小写，请在注册和登录时进行大小写的统一转换。</p><h2 id="三、登录"><a href="#三、登录" class="headerlink" title="三、登录"></a>三、登录</h2><p>当用户注册成功后，需要让他们以后能够登录到他们的账户使用应用。要做到这点可以使用<br><code>方法一</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[BmobUser loginWithUsernameInBackground:self.nameTextField.text password:self.passwordTextField.text];</span><br></pre></td></tr></table></figure><p><code>方法二</code></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[BmobUser loginWithUsernameInBackground:self.nameTextField.text password:self.passwordTextField.text block:^(BmobUser *user, NSError *error) &#123;</span><br><span class="line">    if (user) &#123;</span><br><span class="line">        NSString *result = [NSString stringWithFormat:@&quot;登录成功\n用户名:%@\n密码:%@\n去试试获取当前用户吧&quot;,user.username,user.password];</span><br><span class="line">                    [self showResultInfo:result];</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        NSLog(@&quot;%@&quot;,error);</span><br><span class="line">          [self showResultInfo:@&quot;登录失败，查看可控制台消息&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><blockquote><p>可以看到Bmob里面提供了很多的方法，根据需要调用</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/4905848-d277517e93296a66.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/4905848-bc78c4bac6e6e210.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="四、获取当前用户"><a href="#四、获取当前用户" class="headerlink" title="四、获取当前用户"></a>四、获取当前用户</h2><p>每次你登录成功，都会在本地磁盘中有一个缓存的用户对象作为当前用户，可以获取这个缓存的用户对象来进行登录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">BmobUser *user = [BmobUser currentUser];</span><br><span class="line">   if (user) &#123;</span><br><span class="line">       //进行操作</span><br><span class="line">       NSString *result = [NSString stringWithFormat:@&quot;登录成功\n用户名:%@\n密码:%@\n去试试更新用户吧&quot;,user.username,user.password];</span><br><span class="line">       [self showResultInfo:result];</span><br><span class="line">   &#125;else&#123;</span><br><span class="line">       //对象为空时，可打开用户注册界面</span><br><span class="line">       [self showResultInfo:@&quot;当前没有用户&quot;];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>当然，你也可以用如下的方法清除缓存用户对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[BmobUser logout];</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/4905848-646494f4b64f2961.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="五、更新用户"><a href="#五、更新用户" class="headerlink" title="五、更新用户"></a>五、更新用户</h2><p>当用户登录成功后，在本地有个缓存的用户对象，如果开发者希望更改当前用户的某个属性可按如下代码操作:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">BmobUser *bUser = [BmobUser currentUser];</span><br><span class="line">   </span><br><span class="line">   if (bUser) &#123;</span><br><span class="line">       [bUser setObject:self.nameTextField.text forKey:@&quot;username&quot;];</span><br><span class="line">       [bUser updateInBackgroundWithResultBlock:^(BOOL isSuccessful, NSError *error) &#123;</span><br><span class="line">           if (isSuccessful) &#123;</span><br><span class="line">               [self showResultInfo:@&quot;更新用户成功，去查看当前用户信息吧&quot;];</span><br><span class="line">           &#125;else&#123;</span><br><span class="line">               NSLog(@&quot;error %@&quot;,[error description]);</span><br><span class="line">               [self showResultInfo:@&quot;更新用户失败，控制台查看信息&quot;];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;];</span><br><span class="line">   &#125;else&#123;</span><br><span class="line">        [self showResultInfo:@&quot;当前未登录&quot;];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>一般来说，使用当前用户对象来进行资料更新可能会遇到一个问题。如果当前用户上次登录的时间距离当前时间过长，存放在本地的Token就有可能会过期，导致用户更新资料失败，这是需要重新登录，登录成功后才能更新资料。</p><blockquote><p> 在更新用户信息时，如果用户邮箱有变更并且在管理后台打开了邮箱验证选项的话，Bmob云后端同样会自动发动一封邮件验证信息给用户。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/4905848-8cc6856664ac769b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="六、查询用户"><a href="#六、查询用户" class="headerlink" title="六、查询用户"></a>六、查询用户</h2><p>查询用户和查询普通对象一样，只需指定BmobUser类即可，如下：<br><figure class="highlight plain"><figcaption><span>- C</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">BmobQuery *query = [BmobUser query];</span><br><span class="line">   [query whereKey:@&quot;username&quot; equalTo:self.nameTextField.text];</span><br><span class="line">   [query findObjectsInBackgroundWithBlock:^(NSArray *array, NSError *error) &#123;</span><br><span class="line">       if (error) &#123;</span><br><span class="line">           NSLog(@&quot;%@&quot;,error);</span><br><span class="line">           [self showResultInfo:@&quot;查询出错，查看控制台信息&quot;];</span><br><span class="line"></span><br><span class="line">           </span><br><span class="line">       &#125;else&#123;</span><br><span class="line">           if (array.count&gt;0) &#123;</span><br><span class="line">               for (BmobUser *user in array) &#123; //  demo中只有一个用户，所以把显示结果的放在循环内了</span><br><span class="line">                   NSLog(@&quot;objectid %@&quot;,user.objectId);</span><br><span class="line">                   NSString *result = [NSString stringWithFormat:@&quot;查询成功\n用户名:%@\n用户id:%@&quot;,user.username,user.objectId];</span><br><span class="line">                   [self showResultInfo:result];</span><br><span class="line">                   </span><br><span class="line">               &#125;</span><br><span class="line">           &#125;else&#123;</span><br><span class="line">                [self showResultInfo:@&quot;没有查询到结果，请修改信息后查询&quot;];</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">       &#125;</span><br><span class="line">      </span><br><span class="line">   &#125;];</span><br></pre></td></tr></table></figure></p><p>在Bmob后台查看用户表<br><img src="https://upload-images.jianshu.io/upload_images/4905848-8f211f3973c23449.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="七、修改密码"><a href="#七、修改密码" class="headerlink" title="七、修改密码"></a>七、修改密码</h2><p>使用旧密码来重置新密码的接口，示例如下：<br><code>修改</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">BmobUser *user = [BmobUser currentUser];</span><br><span class="line">   [user updateCurrentUserPasswordWithOldPassword:self.nameTextField.text newPassword:self.passwordTextField.text block:^(BOOL isSuccessful, NSError *error) &#123;</span><br><span class="line">       if (isSuccessful) &#123;</span><br><span class="line">              [self showResultWithLoginInfo:user.username];</span><br><span class="line">         </span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           NSLog(@&quot;change password error:%@&quot;,error);</span><br><span class="line">            [self showResultInfo:@&quot;修改失败，查看可控制台消息&quot;];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;];</span><br></pre></td></tr></table></figure></p><p><code>修改成功之后登录</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//用新密码登录</span><br><span class="line">      [BmobUser loginInbackgroundWithAccount:result andPassword:self.passwordTextField.text block:^(BmobUser *user, NSError *error) &#123;</span><br><span class="line">          if (error) &#123;</span><br><span class="line">              NSLog(@&quot;login error:%@&quot;,error);</span><br><span class="line">              [self showResultInfo:@&quot;登录失败，查看可控制台消息&quot;];</span><br><span class="line">              </span><br><span class="line">          &#125; else &#123;</span><br><span class="line">              </span><br><span class="line">              </span><br><span class="line">              NSLog(@&quot;user:%@&quot;,user);</span><br><span class="line">              NSString *result = [NSString stringWithFormat:@&quot;登录成功\n用户名:%@\n用户ID:%@\n&quot;,user.username,user.objectId];</span><br><span class="line">              [self showResultInfo:result];</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;];</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/4905848-9c5cae8a066b23b9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="八、邮箱找回-修改-密码"><a href="#八、邮箱找回-修改-密码" class="headerlink" title="八、邮箱找回(修改)密码"></a>八、邮箱找回(修改)密码</h2><blockquote><p><strong>前提是在注册操作的时候有添加过邮箱</strong></p></blockquote><p>一旦你引入了一个密码系统，那么肯定会有用户忘记密码的情况。对于这种情况，我们提供了一种方法，让用户安全地重置起密码。</p><p>重置密码的流程很简单，开发者只需要求用户输入注册的电子邮件地址即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[BmobUser requestPasswordResetInBackgroundWithEmail:self.nameTextField.text block:^(BOOL isSuccessful, NSError *error) &#123;</span><br><span class="line">      if (isSuccessful) &#123;</span><br><span class="line">          [self showResultInfo:@&quot;发送成功，请去邮箱内查看邮件&quot;];</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">          NSLog(@&quot;%@&quot;,error);</span><br><span class="line">          [self showResultInfo:@&quot;发送失败，请查看控制台信息&quot;];</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">  &#125;];</span><br></pre></td></tr></table></figure></p><p><code>以下为未开启邮箱验证和注册时未绑定邮箱的</code><br><img src="https://upload-images.jianshu.io/upload_images/4905848-5ff77437e684881e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>密码重置流程如下：</p><ol><li>用户输入他们的电子邮件，请求重置自己的密码。</li><li>Bmob向他们的邮箱发送一封包含特殊的密码重置连接的电子邮件。</li><li>用户根据向导点击重置密码连接，打开一个特殊的Bmob页面，根据提示，他们可以输入一个新的密码。</li><li>用户的密码已被重置为新输入的密码。</li></ol><h2 id="九、总结"><a href="#九、总结" class="headerlink" title="九、总结"></a>九、总结</h2><h3 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h3><blockquote><ol><li>需要在Bmob后台开启邮箱认证</li><li>Bmob后台User表里可添加字段来完善用户信息</li><li>通过邮箱操作密码等信息的需要在注册是要求用户验证邮箱，否则操作失败</li></ol></blockquote><p>Bmob接入具体操作可查看上一篇文章<br><a href="https://www.jianshu.com/p/a9589877b5ad" target="_blank" rel="noopener">iOS独立开发者使用Bmob第三方后台服务初探</a><br>本文同步至<a href="http://chuzhaozhi.cn">个人博客</a><br><a href="https://github.com/chuzhaozhi/BmobUserManage" target="_blank" rel="noopener">代码传送门</a>，欢迎star,感兴趣的可以留言一起探讨。<br>搜索公众号<code>JacerooChu</code>或扫描下方二维码一起讨论和获取更多信息。<br><img src="https://upload-images.jianshu.io/upload_images/4905848-4032051f9cc2352f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="swap.png"><br>iOS独立开发者使用Bmob第三方后台服务之用户管理</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4905848-460fe21f4b32d1d4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
    
      <category term="Bmob" scheme="http://chuzhaozhi.cn/tags/Bmob/"/>
    
  </entry>
  
  <entry>
    <title>iOS独立开发者使用Bmob第三方后台服务初探</title>
    <link href="http://chuzhaozhi.cn/1318804238.html"/>
    <id>http://chuzhaozhi.cn/1318804238.html</id>
    <published>2018-11-15T00:26:17.601Z</published>
    <updated>2018-11-15T00:29:49.665Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><pre><code>Bmob后端云提供可视化的云端数据表设计界面，轻松建库建表。支持10种不同数据类型存储：如字符串，整型，数组等。</code></pre><p></p></blockquote><br><a id="more"></a><p></p><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>Bmob后端云提供可视化的云端数据表设计界面，轻松建库建表。支持10种不同数据类型存储：如字符串，整型，数组等。<br><img src="https://upload-images.jianshu.io/upload_images/4905848-5e0d092fe20de3f0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.jpg"></p><blockquote><p>声明不是为此服务打广告，只是介绍使用</p></blockquote><h2 id="二、简单使用"><a href="#二、简单使用" class="headerlink" title="二、简单使用"></a>二、简单使用</h2><ol><li><p>注册Bmob帐号<br>在网址栏输入<a href="http://www.bmob.cn或者在百度输入Bmob进行搜索，打开Bmob官网后，点击右上角的“注册”，在跳转页面填入你的姓名、邮箱、设置密码，确认后到你的邮箱激活Bmob账户，你就可以用Bmob轻松开发应用了。" target="_blank" rel="noopener">www.bmob.cn或者在百度输入Bmob进行搜索，打开Bmob官网后，点击右上角的“注册”，在跳转页面填入你的姓名、邮箱、设置密码，确认后到你的邮箱激活Bmob账户，你就可以用Bmob轻松开发应用了。</a><br><img src="https://upload-images.jianshu.io/upload_images/4905848-85235b977fd973f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="注册.png"></p></li><li><p>网站后台创建应用<br>登录账号进入bmob后台后，点击后台界面左上角“创建应用”，在弹出框输入你应用的名称，然后确认，你就拥有了一个等待开发的应用。<br><img src="https://upload-images.jianshu.io/upload_images/4905848-abc102e196cee053.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="rumen_chuangjian.png"></p></li><li><p>获取应用密钥和下载SDK<br>选择你要开发的应用，进入该应用<br><img src="https://upload-images.jianshu.io/upload_images/4905848-fd3c91e3d1d17cee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="rumen_miyue_1.png"></p></li></ol><p>在跳转页面，进入设置/应用密钥，点击复制，即可得到Application ID<br><img src="https://upload-images.jianshu.io/upload_images/4905848-8baec04abdfe881c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="![11.png](https://upload-images.jianshu.io/upload_images/4905848-d2d809a4c12c4fd5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)"></p><p>获取Application ID后，下载SDK，开发者可以根据自己的需求选择相应的iOS SDK 或Android SDK，点击下载即可。</p><h2 id="三、iOS端集成SDK方式"><a href="#三、iOS端集成SDK方式" class="headerlink" title="三、iOS端集成SDK方式"></a>三、iOS端集成SDK方式</h2><ol><li>直接下载SDK导入到项目中</li></ol><ul><li><p>将BmobSDK引入项目:<br>在你的XCode项目工程中，添加BmobSDK.framework</p></li><li><p>添加使用的系统framework:</p></li></ul><p>在你的XCode工程中Project -&gt;TARGETS -&gt; Build Phases-&gt;Link Binary With Libraries引入<br>CoreLocation.framework、Security.framework、CoreGraphics.framework、MobileCoreServices.framework、CFNetwork.framework、CoreTelephony.framework、SystemConfiguration.framework、libz.1.2.5.tbd、libicucore.tbd、libsqlite3.tbd、libc++.tbd、photos.framework</p><ol start="2"><li>通过Pods导入，在<code>Podfile</code>中写入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">platform :ios,&apos;9.0&apos;</span><br><span class="line">target &apos;BmopDataDemo&apos; do</span><br><span class="line">pod &apos;BmobSDK&apos;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li></ol><p>之后执行<code>Pod install</code>命令进行安装</p><h2 id="四、iOS简单使用"><a href="#四、iOS简单使用" class="headerlink" title="四、iOS简单使用"></a>四、iOS简单使用</h2><ol><li>设置应用的BmobKey<br>在你的XCode工程中的AppDelegate.m文件中创建应用Key，填入申请的授权Key（SDK使用的是应用密钥里的Application ID），示例如下：<blockquote><p>需要在Bmob控制台先创建表，然后才可进行查删改增的操作</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-(BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions&#123;</span><br><span class="line">    [Bmob registerWithAppKey:@&quot;申请的Application ID&quot;];</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>添加一条数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">BmobObject *gameScore = [BmobObject objectWithClassName:@&quot;Customer&quot;];</span><br><span class="line"> [gameScore setObject:@&quot;小明&quot; forKey:@&quot;UserName&quot;];</span><br><span class="line"> [gameScore setObject:@&quot;1993-07-22&quot; forKey:@&quot;UserBirthDay&quot;];</span><br><span class="line"> [gameScore setObject:@YES forKey:@&quot;Sex&quot;];</span><br><span class="line"> [gameScore saveInBackgroundWithResultBlock:^(BOOL isSuccessful, NSError *error) &#123;</span><br><span class="line">     //进行操作</span><br><span class="line">     if (isSuccessful) &#123;</span><br><span class="line">         self.userId = gameScore.objectId;</span><br><span class="line">         self.showInfo.text =@&quot;添加成功&quot;;</span><br><span class="line">     &#125;else&#123;</span><br><span class="line">         self.showInfo.text =@&quot;添加失败&quot;;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;];</span><br></pre></td></tr></table></figure><ol start="3"><li><p>查询一条数据</p><figure class="highlight plain"><figcaption><span>- C</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> BmobQuery   *bquery = [BmobQuery queryWithClassName:@&quot;Customer&quot;];</span><br><span class="line">//查找GameScore表里面id为0c6db13c的数据</span><br><span class="line">[bquery getObjectInBackgroundWithId:self.userId block:^(BmobObject *object,NSError *error)&#123;</span><br><span class="line">    if (error)&#123;</span><br><span class="line">        //进行错误处理</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        //表里有id为0c6db13c的数据</span><br><span class="line">        if (object) &#123;</span><br><span class="line">            //得到playerName和cheatMode</span><br><span class="line">            NSString *playerName = [object objectForKey:@&quot;UserName&quot;];</span><br><span class="line">            BOOL cheatMode = [[object objectForKey:@&quot;cheatMode&quot;] boolValue];</span><br><span class="line">            NSLog(@&quot;%@----%i&quot;,playerName,cheatMode);</span><br><span class="line">             self.showInfo.text =playerName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></li><li><p>删除一条数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> BmobQuery *bquery = [BmobQuery queryWithClassName:@&quot;Customer&quot;];</span><br><span class="line">[bquery getObjectInBackgroundWithId:self.userId block:^(BmobObject *object, NSError *error)&#123;</span><br><span class="line">    if (error) &#123;</span><br><span class="line">        //进行错误处理</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        if (object) &#123;</span><br><span class="line">            //异步删除object</span><br><span class="line">            [object deleteInBackground];</span><br><span class="line">            self.showInfo.text =@&quot;删除成功&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="Bmob控制台"><a href="#Bmob控制台" class="headerlink" title="Bmob控制台"></a>Bmob控制台</h2><p><img src="https://upload-images.jianshu.io/upload_images/4905848-f0452e70e561516e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="11.png"></p><p>其他操作请参考官方文档。<br>代码上传至<a href="https://github.com/chuzhaozhi/BmobDemo" target="_blank" rel="noopener">GittHub</a>,欢迎star<br><a href="http://chuzhaozhi.cn">更多文章</a><br>关注公众号<code>JackerooChu</code>获取更多文章资源。<br><img src="https://upload-images.jianshu.io/upload_images/4905848-c82ef7d8c11ba86c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="swap.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;

&lt;pre&gt;&lt;code&gt;Bmob后端云提供可视化的云端数据表设计界面，轻松建库建表。支持10种不同数据类型存储：如字符串，整型，数组等。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Bmob" scheme="http://chuzhaozhi.cn/tags/Bmob/"/>
    
  </entry>
  
  <entry>
    <title>Office 2019 Mac 破解版分享</title>
    <link href="http://chuzhaozhi.cn/3716873143.html"/>
    <id>http://chuzhaozhi.cn/3716873143.html</id>
    <published>2018-11-12T01:54:37.047Z</published>
    <updated>2018-11-12T02:05:35.977Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/4905848-de4717f791651d5f.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="timg.jpeg"></p><blockquote class="blockquote-center"><h2 id="一、应用介绍"><a href="#一、应用介绍" class="headerlink" title="一、应用介绍"></a>一、应用介绍</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 全新的、富有时代气息的 Word、Excel、PowerPoint、Outlook 和 OneNote — 将熟悉的 Office 与你钟爱的独有 Mac 功能相结合，让你可以快速上手。<br></p></blockquote><br><a id="more"></a><br>无论身处何处，你都能随时创建精美的文档，深入获取各类信息，从容自信地展示。 Office 应用程序功能强大，借助 Office 应用程序，你可以在平板电脑、手机和 Web 上随时完成工作。<br>内置工具能更好地支持团队协作，团队成员可以共享、审阅和共同编辑文档、演示文稿和笔记，让你的团队更高效紧密合作。<p></p><h2 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h2><ul><li>打开 <code>Office20191618.zip</code> 文件夹，获得以下文件：<br><img src="https://upload-images.jianshu.io/upload_images/4905848-71a40197ba062a4c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="01.jpg"></li><li>双击运行<code>Setup.pkg</code> 文件进入安装操作<br><img src="https://upload-images.jianshu.io/upload_images/4905848-27efadcf81d91e24.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="02.jpg"><br><img src="https://upload-images.jianshu.io/upload_images/4905848-36837a59a78ddc24.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="03.jpg"><blockquote><p> 这里可以选择安装位置以及自定义安装，把不需要的office功能去掉</p></blockquote></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/4905848-d959874ed651bc18.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="07.jpg"></p><p><img src="https://upload-images.jianshu.io/upload_images/4905848-1161970a5654551a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="05.jpg"><br><img src="https://upload-images.jianshu.io/upload_images/4905848-482a908d66be34ac.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="06.jpg"></p><ul><li>打开任意office软件，此处以Word为例<br><img src="https://upload-images.jianshu.io/upload_images/4905848-d4450f15185b2975.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="08.jpg"></li></ul><blockquote><p>任意选择，影响不大</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/4905848-7764d59ed5d71981.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="09.jpg"></p><h2 id="三、激活方法"><a href="#三、激活方法" class="headerlink" title="三、激活方法"></a>三、激活方法</h2><ul><li>运行在第一步中获取的文件<code>Microsoft_Office_2019_VL_Serializer.pkg</code><br><img src="https://upload-images.jianshu.io/upload_images/4905848-f8cf240229420202.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="001.jpg"></li></ul><blockquote><p>如果出现这种情况，请在安全设置中打开任何来源</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/4905848-ca1d2b889358d028.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="11.jpg"></p><blockquote><p>如果没有任何来源选项，请在终端输入 <code>sudo spctl --master-disable</code></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/4905848-6d47b219e88b48ea.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="13.jpg"></p><blockquote><p>会要求输入电脑密码，此处输入不显示，确保输入正确后回车即可</p><ul><li>激活文件安装<br><img src="https://upload-images.jianshu.io/upload_images/4905848-f459d633b9fc4232.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="001.jpg"></li></ul></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/4905848-b1a675b85d5fa1d9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="002.jpg"></p><ul><li><p>打开软件测试<br><img src="https://upload-images.jianshu.io/upload_images/4905848-eaf583e5c786514c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="003.jpg"></p><blockquote><p>至此，Mac版的Office 2019就安装完成了。</p></blockquote><h2 id="四、资源获取"><a href="#四、资源获取" class="headerlink" title="四、资源获取"></a>四、资源获取</h2><p>由于某盘会和谐文件，如有需要请搜索公众号<code>JackerooChu</code>或者扫描二维码私信或者在公众号对应文章下评论留下邮箱，稍后会一一发送文件或者临时下载地址。<br><img src="https://upload-images.jianshu.io/upload_images/4905848-0826b2a139ffc94c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="更多资源.png"></p></li></ul><h4 id="ps-仅供学习研究使用，不存在任何商业利益行为，请支持正版"><a href="#ps-仅供学习研究使用，不存在任何商业利益行为，请支持正版" class="headerlink" title="ps: 仅供学习研究使用，不存在任何商业利益行为，请支持正版"></a>ps: 仅供学习研究使用，不存在任何商业利益行为，请支持正版</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4905848-de4717f791651d5f.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;timg.jpeg&quot;&gt;&lt;/p&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;

&lt;h2 id=&quot;一、应用介绍&quot;&gt;&lt;a href=&quot;#一、应用介绍&quot; class=&quot;headerlink&quot; title=&quot;一、应用介绍&quot;&gt;&lt;/a&gt;一、应用介绍&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 全新的、富有时代气息的 Word、Excel、PowerPoint、Outlook 和 OneNote — 将熟悉的 Office 与你钟爱的独有 Mac 功能相结合，让你可以快速上手。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://chuzhaozhi.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>关于苹果内购那点破事儿（3.1.1大礼包解决方案）</title>
    <link href="http://chuzhaozhi.cn/2007592920.html"/>
    <id>http://chuzhaozhi.cn/2007592920.html</id>
    <published>2018-11-03T03:15:29.142Z</published>
    <updated>2018-11-03T03:20:11.672Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大家都知道想要在AppStore上线带有虚拟物品交易的app必须要走苹果的内购渠道，否则就会因为3.1.1条款被拒绝，如图所示：</blockquote></p><p><br><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大家都知道想要在AppStore上线带有虚拟物品交易的app必须要走苹果的内购渠道，否则就会因为3.1.1条款被拒绝，如图所示：<br><img src="https://upload-images.jianshu.io/upload_images/4905848-82dd7051a8cccced.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>翻译之后的意思是：<br><code>指南3.1.1商业支付-应用程序购买我们注意到，您的应用程序或其元数据可以通过应用程序内购买API之外的其他方式购买应用程序中的内容、服务或功能，这不适合于App Store。下一步虽然您所包括的支付系统可以在应用程序外部进行交易，但如果可购买的内容、功能或服务打算在应用程序中使用，则必须在应用程序中使用应用程序内购买来购买，除非是指南中提到的类型。3.1.3的App Store审查指南。</code></p><blockquote><p>虚拟物品包括会员、报名费、视频购买等等非实物交易</p></blockquote><p> 最近上线一个包含活动报名以及视频付费播放的app，因为有虚拟物品交易和实物交易，在项目中集成了微信支付和支付宝支付，一开始采取的是这两种方式来进行支付，测试完毕提交审核，第二天一早便收到苹果拒绝的回复：<br> <img src="https://upload-images.jianshu.io/upload_images/4905848-979ac51ed354ba12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>拒绝的原因有两个：</p><ul><li>包含有测试数据</li><li>有虚拟物品交易没有使用内购</li></ul><p>第一条被拒的原因是因为后台没有变更数据库，导致显示的数据带有测试字样，直接被苹果拒绝并截图返回<br><img src="https://upload-images.jianshu.io/upload_images/4905848-76302d3fc51867e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>在此也是提醒各位在提交审核的时候避免出现测试、Test、Beat、Demo、Trial等字样，苹果审核那边看到如此字样直接拒绝。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>不需要重新打包上传，在和后台沟通后修改掉以上会被拒绝的字眼后直接回复苹果邮件：<br><img src="https://upload-images.jianshu.io/upload_images/4905848-09d24db676c964fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>然后等待苹果审核，然而还是没有避免掉3.1.1的条款，多次回复邮件说明情况还是被拒绝，后来和后台商量将所有活动报名和视频播放都改为免费，不需收费便可直接使用，回复邮件并附属上说明图片（回复的时候可以直接添加附件即可）<br><img src="https://upload-images.jianshu.io/upload_images/4905848-546ddac791534bca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>这一次的提交之后，苹果审核那边时间相对延长了一天，之前都是隔天就给了回馈，然而收到的还是3.1.1条款拒绝，截图返回如下：<br><img src="https://upload-images.jianshu.io/upload_images/4905848-406d03b0abc76e80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>看到图片的时候想到可能是因为显示了票价，此时很崩溃有没有？？？既然回复邮件说明都不奏效，那只能另寻出路了。。。</p><h4 id="终极解决方案"><a href="#终极解决方案" class="headerlink" title="终极解决方案"></a>终极解决方案</h4><ol><li>和后台商量添加审核字段<code>isCheck</code>来标识是否在审核期间（如下图）</li><li>app端对服务器返回的字段进行重新布局，在列表页面对价格进行隐藏，详情页将价格cell进行隐藏，结果如下图</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/4905848-d606909c848ef722.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/4905848-bd63d22165730796.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>在app端显示如下：<br><img src="https://upload-images.jianshu.io/upload_images/4905848-490ef48481c3cf2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>至此，重新打包上传，过了一晚边收到审核通过的消息，在发布应用后便可让后台改回原来的价格，app正常使用了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>苹果审核比较严格，对测试数据把控需严谨。</li><li>此处给的方案治标不治本，业务需要的话还是需要走苹果提供的内购渠道。</li><li>以此方法上线的app在后期有几率被苹果复审下架。</li><li>版本迭代的时候需要再次跟后台沟通改变<code>isCheck</code>的值</li></ol><blockquote><p>ios小白一枚，请多多关照，不喜勿喷</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;大家都知道想要在AppStore上线带有虚拟物品交易的app必须要走苹果的内购渠道，否则就会因为3.1.1条款被拒绝，如图所示：&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS，苹果审核" scheme="http://chuzhaozhi.cn/tags/iOS%EF%BC%8C%E8%8B%B9%E6%9E%9C%E5%AE%A1%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>升级macOs Mojave之后CleanMyMac X破解版，有需要自取</title>
    <link href="http://chuzhaozhi.cn/24798.html"/>
    <id>http://chuzhaozhi.cn/24798.html</id>
    <published>2018-09-25T03:28:46.000Z</published>
    <updated>2018-11-12T03:05:36.159Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CleanMyMac 4是一款功能强大的Mac系统优化清理工具，使用旨在帮助用户更加方便的清理您系统中的所有垃圾，从而加快电脑运行速度，保持最佳性能，更加稳定、流畅、快速，使用CleanMyMac4，您可自动清理各种11种不同类型的垃圾文件、浏览器缓存、日志记录、清理iPhoto垃圾、垃圾邮件、卸载软件以及删除清理各种扩展等，电脑从此更加干净清爽，支持自动定时清理，非常的方便！<br></blockquote><br><a id="more"></a><br><img src="https://upload-images.jianshu.io/upload_images/4905848-8b37114e659fead1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>更多文章请访问<a href="http://chuzhaozhi.cn">个人博客</a></p><blockquote><p>此出文件仅供学习研究使用，其他商业行为请下载<a href="https://www.hkcleanmymac.com/" target="_blank" rel="noopener">官方正版</a></p></blockquote><p><img src="http://jackeroochu-blog.oss-cn-shanghai.aliyuncs.com/swap.png" alt="swip.pngg"></p><p>扫描上方二维码或直接搜索<code>JackerooChu</code>关注公众号获取资源。</p><p><img src="http://jackeroochu-blog.oss-cn-shanghai.aliyuncs.com/sucha.jpg" alt="小程序"></p><p>微信扫描上方二维码或直接搜索<code>速查天气</code>，体验小程序。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CleanMyMac 4是一款功能强大的Mac系统优化清理工具，使用旨在帮助用户更加方便的清理您系统中的所有垃圾，从而加快电脑运行速度，保持最佳性能，更加稳定、流畅、快速，使用CleanMyMac4，您可自动清理各种11种不同类型的垃圾文件、浏览器缓存、日志记录、清理iPhoto垃圾、垃圾邮件、卸载软件以及删除清理各种扩展等，电脑从此更加干净清爽，支持自动定时清理，非常的方便！&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>图像处理库GPUImage简单使用</title>
    <link href="http://chuzhaozhi.cn/47905.html"/>
    <id>http://chuzhaozhi.cn/47905.html</id>
    <published>2018-09-19T02:27:19.568Z</published>
    <updated>2018-09-28T06:50:41.584Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>GPUImage</code>是一个基于<code>OpenGL ES 2.0</code>的开源的图像处理库，作者是<a href="https://link.jianshu.com/?t=https://github.com/BradLarson" target="_blank" rel="noopener">Brad Larson</a>。<code>GPUImage</code>将<code>OpenGL ES</code>封装为简洁的<code>Objective-C</code>或<code>Swift</code>接口，可以用来给图像、实时相机视频、电影等添加滤镜。<br></p></blockquote><br><a id="more"></a><p></p><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><h3 id="1-导入GPUImage两种方式"><a href="#1-导入GPUImage两种方式" class="headerlink" title="1.导入GPUImage两种方式"></a>1.导入GPUImage两种方式</h3><h4 id="a-使用-cocopods导入"><a href="#a-使用-cocopods导入" class="headerlink" title="a.使用 cocopods导入"></a>a.使用 <code>cocopods</code>导入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">platform :ios, &apos;9.0&apos;</span><br><span class="line">target &apos;GPUImageDemo&apos; do</span><br><span class="line">pod &apos;GPUImage&apos;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><blockquote><p>注：给项目添加cocopods等操作在此不做多余赘述</p></blockquote><h4 id="b-手动导入"><a href="#b-手动导入" class="headerlink" title="b.手动导入"></a>b.手动导入</h4><p> （1）.首先下载GPUImage，<a href="https://github.com/BradLarson/GPUImage" target="_blank" rel="noopener">下载地址</a><br> （2）.解压后，在framework 目录下，打开<code>GPUImage.xcodeproj</code>工程<br><img src="https://upload-images.jianshu.io/upload_images/4905848-7f593efff167175f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片来源于网络.png"><br>（3）.因为 GPUImage是一个开源的库 ，所以需要自己生成 静态库（以前的笨方法把整个工程加入项目，这在使用中出现了很不不必要的麻烦）<br>（4）.运行该工程（生成 用于真机和模拟器的lib)</p><p>（5）.点击Products下的 libGPUImage.a，右键， show in finder 将 两个lib 合并（方法，详见关于 <a href="https://www.jianshu.com/p/ca2f329254e8" target="_blank" rel="noopener">创建静态库的博文</a>）</p><p>（6）.将 GPUImage.h文件中包含的头文件全部 提取到 header文件中</p><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h3><p>（1）.导入头文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;GPUImageView.h&gt;</span><br><span class="line">#import &lt;GPUImage/GPUImage.h&gt;</span><br></pre></td></tr></table></figure></p><p>（2）.使用滤镜<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">UIImage *inputImage =[UIImage imageNamed:@&quot;lzl&quot;];</span><br><span class="line">//  创建滤镜</span><br><span class="line">GPUImageVignetteFilter *disFilter = [[GPUImageVignetteFilter alloc] init];</span><br><span class="line">//设置要渲染的区域</span><br><span class="line">[self.filter forceProcessingAtSize:inputImage.size];</span><br><span class="line">[self.filter useNextFrameForImageCapture];</span><br><span class="line">//获取数据源</span><br><span class="line">GPUImagePicture *stillImageSource = [[GPUImagePicture alloc]initWithImage:inputImage];</span><br><span class="line">//添加上滤镜</span><br><span class="line">[stillImageSource addTarget:self.filter];</span><br><span class="line">//开始渲染</span><br><span class="line">[stillImageSource processImage];</span><br><span class="line">//获取渲染后的图片</span><br><span class="line">UIImage *newImage = [self.filter imageFromCurrentFramebuffer];</span><br><span class="line">//加载出来</span><br><span class="line">UIImageView *imageView = [[UIImageView alloc] initWithImage:newImage];</span><br><span class="line">imageView.frame = CGRectMake(50,0,250 ,250);</span><br><span class="line">[self.view addSubview:imageView];</span><br></pre></td></tr></table></figure></p><p>（3）.效果<br><img src="https://upload-images.jianshu.io/upload_images/4905848-b5a91c4a3cf4494f.gif?imageMogr2/auto-orient/strip" alt="效果图.gif"></p><h2 id="三、概念解析"><a href="#三、概念解析" class="headerlink" title="三、概念解析"></a>三、概念解析</h2><p><code>output</code>为输出源<br><code>intput</code>为输入源<br><code>filter</code>为滤镜</p><blockquote><p>以下为滤镜，添加了部分注释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">// Filters</span><br><span class="line">#import &quot;GPUImageFilter.h&quot;</span><br><span class="line">#import &quot;GPUImageTwoInputFilter.h&quot;</span><br><span class="line">#import &quot;GPUImagePixellateFilter.h&quot;              //像素化</span><br><span class="line">#import &quot;GPUImagePixellatePositionFilter.h&quot;</span><br><span class="line">#import &quot;GPUImageSepiaFilter.h&quot;                      // 褐色（怀旧）</span><br><span class="line">#import &quot;GPUImageColorInvertFilter.h&quot;                //  反色</span><br><span class="line">#import &quot;GPUImageSaturationFilter.h&quot;                 // 饱和度</span><br><span class="line">#import &quot;GPUImageContrastFilter.h&quot;                   // 对比度</span><br><span class="line">#import &quot;GPUImageExposureFilter.h&quot;                   //  曝光</span><br><span class="line">#import &quot;GPUImageBrightnessFilter.h&quot;                 // 亮度  </span><br><span class="line">#import &quot;GPUImageLevelsFilter.h&quot;                     // 色阶</span><br><span class="line">#import &quot;GPUImageSharpenFilter.h&quot;                    //锐化</span><br><span class="line">#import &quot;GPUImageGammaFilter.h&quot;                      //gamma：要应用的灰度调整（0.0 - 3.0，默认为1.0）</span><br><span class="line">#import &quot;GPUImageSobelEdgeDetectionFilter.h&quot;              //Sobel边缘检测算法(白边，黑内容，有点漫画的反色效果)</span><br><span class="line">#import &quot;GPUImageSketchFilter.h&quot;                         //素描</span><br><span class="line">#import &quot;GPUImageToonFilter.h&quot;                         //卡通效果（黑色粗线描边）</span><br><span class="line">#import &quot;GPUImageSmoothToonFilter.h&quot;                //相比上面的效果更细腻，上面是粗旷的画风</span><br><span class="line">#import &quot;GPUImageMultiplyBlendFilter.h&quot;              //通常用于创建阴影和深度效果</span><br><span class="line">#import &quot;GPUImageDissolveBlendFilter.h&quot;              //溶解</span><br><span class="line">#import &quot;GPUImageKuwaharaFilter.h&quot;                  //桑原(Kuwahara)滤波,水粉画的模糊效果；处理时间比较长，慎用</span><br><span class="line">#import &quot;GPUImageKuwaharaRadius3Filter.h&quot;</span><br><span class="line">#import &quot;GPUImageVignetteFilter.h&quot;                    //晕影，形成黑色圆形边缘，突出中间图像的效果</span><br><span class="line">#import &quot;GPUImageGaussianBlurFilter.h&quot;               //高斯模糊</span><br><span class="line">#import &quot;GPUImageGaussianBlurPositionFilter.h&quot;</span><br><span class="line">#import &quot;GPUImageGaussianSelectiveBlurFilter.h&quot;         //高斯模糊，选择部分清晰</span><br><span class="line">#import &quot;GPUImageOverlayBlendFilter.h&quot;                         //叠加,通常用于创建阴影效果</span><br><span class="line">#import &quot;GPUImageDarkenBlendFilter.h&quot;                   //加深混合,通常用于重叠类型</span><br><span class="line">#import &quot;GPUImageLightenBlendFilter.h&quot;               //减淡混合,通常用于重叠类型</span><br><span class="line">#import &quot;GPUImageSwirlFilter.h&quot;                       //漩涡，中间形成卷曲的画面</span><br><span class="line">#import &quot;GPUImageSourceOverBlendFilter.h&quot;                    //源混合</span><br><span class="line">#import &quot;GPUImageColorBurnBlendFilter.h&quot;            //色彩加深混合</span><br><span class="line">#import &quot;GPUImageColorDodgeBlendFilter.h&quot;            //色彩减淡混合</span><br><span class="line">#import &quot;GPUImageScreenBlendFilter.h&quot;                //屏幕包裹,通常用于创建亮点和镜头眩光</span><br><span class="line">#import &quot;GPUImageExclusionBlendFilter.h&quot;           //排除混合</span><br><span class="line">#import &quot;GPUImageDifferenceBlendFilter.h&quot;                 //差异混合,通常用于创建更多变动的颜色</span><br><span class="line">#import &quot;GPUImageSubtractBlendFilter.h&quot;                  //差值混合,通常用于创建两个图像之间的动画变暗模糊效果</span><br><span class="line">#import &quot;GPUImageHardLightBlendFilter.h&quot;                 //强光混合,通常用于创建阴影效果</span><br><span class="line">#import &quot;GPUImageSoftLightBlendFilter.h&quot;            //柔光混合</span><br><span class="line">#import &quot;GPUImageColorBlendFilter.h&quot;</span><br><span class="line">#import &quot;GPUImageHueBlendFilter.h&quot;</span><br><span class="line">#import &quot;GPUImageSaturationBlendFilter.h&quot;</span><br><span class="line">#import &quot;GPUImageLuminosityBlendFilter.h&quot;</span><br><span class="line">#import &quot;GPUImageCropFilter.h&quot;                           //剪裁</span><br><span class="line">#import &quot;GPUImageGrayscaleFilter.h&quot;                 // 灰度</span><br><span class="line">#import &quot;GPUImageTransformFilter.h&quot;                 //形状变化</span><br><span class="line">#import &quot;GPUImageChromaKeyBlendFilter.h&quot;             //色度键混合</span><br><span class="line">#import &quot;GPUImageHazeFilter.h&quot;                      //朦胧加暗</span><br><span class="line">#import &quot;GPUImageLuminanceThresholdFilter.h&quot;          //亮度阈</span><br><span class="line">#import &quot;GPUImagePosterizeFilter.h&quot;                 //色调分离，形成噪点效果</span><br><span class="line">#import &quot;GPUImageBoxBlurFilter.h&quot;                    //盒状模糊</span><br><span class="line">#import &quot;GPUImageAdaptiveThresholdFilter.h&quot;              //自适应阈值</span><br><span class="line">#import &quot;GPUImageUnsharpMaskFilter.h&quot;</span><br><span class="line">#import &quot;GPUImageBulgeDistortionFilter.h&quot;            //凸起失真，鱼眼效果</span><br><span class="line">#import &quot;GPUImagePinchDistortionFilter.h&quot;        //收缩失真，凹面镜</span><br><span class="line">#import &quot;GPUImageCrosshatchFilter.h&quot;            //交叉线阴影，形成黑白网状画面</span><br><span class="line">#import &quot;GPUImageCGAColorspaceFilter.h&quot;          //CGA色彩滤镜，形成黑、浅蓝、紫色块的画面</span><br><span class="line">#import &quot;GPUImagePolarPixellateFilter.h&quot;             //同心圆像素化</span><br><span class="line">#import &quot;GPUImageStretchDistortionFilter.h&quot;      //伸展失真，哈哈镜</span><br><span class="line">#import &quot;GPUImagePerlinNoiseFilter.h&quot;         //柏林噪点，花边噪点</span><br><span class="line">#import &quot;GPUImageJFAVoronoiFilter.h&quot;</span><br><span class="line">#import &quot;GPUImageVoronoiConsumerFilter.h&quot;</span><br><span class="line">#import &quot;GPUImageMosaicFilter.h&quot;                      //黑白马赛克</span><br><span class="line">#import &quot;GPUImageTiltShiftFilter.h&quot;                 //条纹模糊，中间清晰，上下两端模糊</span><br><span class="line">#import &quot;GPUImage3x3ConvolutionFilter.h&quot;        //3x3卷积，高亮大色块变黑，加亮边缘、线条等</span><br><span class="line">#import &quot;GPUImageEmbossFilter.h&quot;                        //浮雕效果，带有点3d的感觉</span><br><span class="line">#import &quot;GPUImageCannyEdgeDetectionFilter.h&quot;        //Canny边缘检测算法</span><br><span class="line">#import &quot;GPUImageThresholdEdgeDetectionFilter.h&quot;         //阈值边缘检测（效果与上差别不大）</span><br><span class="line">#import &quot;GPUImageMaskFilter.h&quot;                                //遮罩混合</span><br><span class="line">#import &quot;GPUImageHistogramFilter.h&quot;                 // 色彩直方图，显示在图片上</span><br><span class="line">#import &quot;GPUImageHistogramGenerator.h&quot;              // 色彩直方图</span><br><span class="line">#import &quot;GPUImageHistogramEqualizationFilter.h&quot;</span><br><span class="line">#import &quot;GPUImagePrewittEdgeDetectionFilter.h&quot;      //普瑞维特(Prewitt)边缘检测(效果与Sobel差不多，貌似更平滑)</span><br><span class="line">#import &quot;GPUImageXYDerivativeFilter.h&quot;            //XYDerivative边缘检测，画面以蓝色为主，绿色为边缘，带彩色</span><br><span class="line">#import &quot;GPUImageHarrisCornerDetectionFilter.h&quot;      //Harris角点检测，会有绿色小十字显示在图片角点处</span><br><span class="line">#import &quot;GPUImageAlphaBlendFilter.h&quot;                 //透明混合,通常用于在背景上应用前景的透明度</span><br><span class="line">#import &quot;GPUImageNormalBlendFilter.h&quot;                   //正常</span><br><span class="line">#import &quot;GPUImageNonMaximumSuppressionFilter.h&quot;                  //非最大抑制，只显示亮度最高的像素，其他为黑</span><br><span class="line">#import &quot;GPUImageRGBFilter.h&quot;                      //  RGB</span><br><span class="line">#import &quot;GPUImageMedianFilter.h&quot;                     //中间值，有种稍微模糊边缘的效果</span><br><span class="line">#import &quot;GPUImageBilateralFilter.h&quot;              //双边模糊</span><br><span class="line">#import &quot;GPUImageCrosshairGenerator.h&quot;      //十字</span><br><span class="line">#import &quot;GPUImageToneCurveFilter.h&quot;             // 色调曲线</span><br><span class="line">#import &quot;GPUImageNobleCornerDetectionFilter.h&quot;  //Noble角点检测，检测点更多</span><br><span class="line">#import &quot;GPUImageShiTomasiFeatureDetectionFilter.h&quot;   //ShiTomasi角点检测，与上差别不大</span><br><span class="line">#import &quot;GPUImageErosionFilter.h&quot;            //侵蚀边缘模糊，变黑白</span><br><span class="line">#import &quot;GPUImageRGBErosionFilter.h&quot;           //RGB侵蚀边缘模糊，有色彩</span><br><span class="line">#import &quot;GPUImageDilationFilter.h&quot;                   //扩展边缘模糊，变黑白</span><br><span class="line">#import &quot;GPUImageRGBDilationFilter.h&quot;                //RGB扩展边缘模糊，有色彩</span><br><span class="line">#import &quot;GPUImageOpeningFilter.h&quot;           //黑白色调模糊</span><br><span class="line">#import &quot;GPUImageRGBOpeningFilter.h&quot;        //RGB扩展边缘模糊，有色彩</span><br><span class="line">#import &quot;GPUImageClosingFilter.h&quot;           //黑白色调模糊，暗色会被提亮</span><br><span class="line">#import &quot;GPUImageRGBClosingFilter.h&quot;        //彩色模糊，暗色会被提亮</span><br><span class="line">#import &quot;GPUImageColorPackingFilter.h&quot;      //色彩丢失，模糊（类似监控摄像效果）</span><br><span class="line">#import &quot;GPUImageSphereRefractionFilter.h&quot;    //球形折射，图形倒立</span><br><span class="line">#import &quot;GPUImageMonochromeFilter.h&quot;            // 单色</span><br><span class="line">#import &quot;GPUImageOpacityFilter.h&quot;               // 不透明度</span><br><span class="line">#import &quot;GPUImageHighlightShadowFilter.h&quot;       // 提亮阴影</span><br><span class="line">#import &quot;GPUImageFalseColorFilter.h&quot;            // 色彩替换（替换亮部和暗部色彩）</span><br><span class="line">#import &quot;GPUImageHSBFilter.h&quot;</span><br><span class="line">#import &quot;GPUImageHueFilter.h&quot;                   //色度</span><br><span class="line">#import &quot;GPUImageGlassSphereFilter.h&quot;          //水晶球效果</span><br><span class="line">#import &quot;GPUImageLookupFilter.h&quot;                 //lookup 色彩调整</span><br><span class="line">#import &quot;GPUImageAmatorkaFilter.h&quot;               //Amatorka lookup</span><br><span class="line">#import &quot;GPUImageMissEtikateFilter.h&quot;                //MissEtikate lookup</span><br><span class="line">#import &quot;GPUImageSoftEleganceFilter.h&quot;          //SoftElegance lookup</span><br><span class="line">#import &quot;GPUImageAddBlendFilter.h&quot;          //通常用于创建两个图像之间的动画变亮模糊效果</span><br><span class="line">#import &quot;GPUImageDivideBlendFilter.h&quot;           //通常用于创建两个图像之间的动画变暗模糊效果</span><br><span class="line">#import &quot;GPUImagePolkaDotFilter.h&quot;           //像素圆点花样</span><br><span class="line">#import &quot;GPUImageLocalBinaryPatternFilter.h&quot;   //图像黑白化，并有大量噪点</span><br><span class="line">#import &quot;GPUImageLanczosResamplingFilter.h&quot;          //Lanczos重取样，模糊效果</span><br><span class="line">#import &quot;GPUImageAverageColor.h&quot;                 //像素平均色值</span><br><span class="line">#import &quot;GPUImageSolidColorGenerator.h&quot;           //纯色</span><br><span class="line">#import &quot;GPUImageLuminosity.h&quot;                  //亮度平均</span><br><span class="line">#import &quot;GPUImageAverageLuminanceThresholdFilter.h&quot;   //像素色值亮度平均，图像黑白（有类似漫画效果）</span><br><span class="line">#import &quot;GPUImageWhiteBalanceFilter.h&quot;              //白平横</span><br><span class="line">#import &quot;GPUImageChromaKeyFilter.h&quot;                 //色度键</span><br><span class="line">#import &quot;GPUImageLowPassFilter.h&quot;            //用于图像加亮</span><br><span class="line">#import &quot;GPUImageHighPassFilter.h&quot;               //图像低于某值时显示为黑</span><br><span class="line">#import &quot;GPUImageMotionDetector.h&quot;        //动作检测</span><br><span class="line">#import &quot;GPUImageHalftoneFilter.h&quot;         //点染,图像黑白化，由黑点构成原图的大致图形</span><br><span class="line">#import &quot;GPUImageThresholdedNonMaximumSuppressionFilter.h&quot;          //非最大抑制，只显示亮度最高的像素，其他为黑，像素丢失更多</span><br><span class="line">#import &quot;GPUImageHoughTransformLineDetector.h&quot;    //线条检测</span><br><span class="line">#import &quot;GPUImageParallelCoordinateLineTransformFilter.h&quot;  //平行线检测</span><br><span class="line">#import &quot;GPUImageThresholdSketchFilter.h&quot;    //阀值素描，形成有噪点的素描</span><br><span class="line">#import &quot;GPUImageLineGenerator.h&quot;           // 线条</span><br><span class="line">#import &quot;GPUImageLinearBurnBlendFilter.h&quot;</span><br><span class="line">#import &quot;GPUImageGaussianBlurPositionFilter.h&quot;</span><br><span class="line">#import &quot;GPUImagePixellatePositionFilter.h&quot;</span><br><span class="line">#import &quot;GPUImageTwoInputCrossTextureSamplingFilter.h&quot;</span><br><span class="line">#import &quot;GPUImagePoissonBlendFilter.h&quot;</span><br><span class="line">#import &quot;GPUImageMotionBlurFilter.h&quot;</span><br><span class="line">#import &quot;GPUImageZoomBlurFilter.h&quot;</span><br><span class="line">#import &quot;GPUImageLaplacianFilter.h&quot;</span><br><span class="line">#import &quot;GPUImageiOSBlurFilter.h&quot;</span><br><span class="line">#import &quot;GPUImageLuminanceRangeFilter.h&quot;</span><br><span class="line">#import &quot;GPUImageDirectionalNonMaximumSuppressionFilter.h&quot;</span><br><span class="line">#import &quot;GPUImageDirectionalSobelEdgeDetectionFilter.h&quot;</span><br><span class="line">#import &quot;GPUImageSingleComponentGaussianBlurFilter.h&quot;</span><br><span class="line">#import &quot;GPUImageThreeInputFilter.h&quot;</span><br><span class="line">#import &quot;GPUImageWeakPixelInclusionFilter.h&quot;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>代码<a href="https://github.com/chuzhaozhi/GPUImageDemo.git" target="_blank" rel="noopener">传送门</a><br>  <a href="https://www.jianshu.com/p/c5c5f806473c" target="_blank" rel="noopener">简书</a><br>  <a href="https://juejin.im/post/5ba1b375f265da0ae343eb78" target="_blank" rel="noopener">掘金</a></p></blockquote><p>ps: 大神请轻喷，如果觉得还行，请点个star，谢谢！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;

&lt;h2 id=&quot;一、介绍&quot;&gt;&lt;a href=&quot;#一、介绍&quot; class=&quot;headerlink&quot; title=&quot;一、介绍&quot;&gt;&lt;/a&gt;一、介绍&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;GPUImage&lt;/code&gt;是一个基于&lt;code&gt;OpenGL ES 2.0&lt;/code&gt;的开源的图像处理库，作者是&lt;a href=&quot;https://link.jianshu.com/?t=https://github.com/BradLarson&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Brad Larson&lt;/a&gt;。&lt;code&gt;GPUImage&lt;/code&gt;将&lt;code&gt;OpenGL ES&lt;/code&gt;封装为简洁的&lt;code&gt;Objective-C&lt;/code&gt;或&lt;code&gt;Swift&lt;/code&gt;接口，可以用来给图像、实时相机视频、电影等添加滤镜。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="IT技能" scheme="http://chuzhaozhi.cn/categories/IT%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="滤镜" scheme="http://chuzhaozhi.cn/tags/%E6%BB%A4%E9%95%9C/"/>
    
      <category term="GPUImage" scheme="http://chuzhaozhi.cn/tags/GPUImage/"/>
    
      <category term="颜色" scheme="http://chuzhaozhi.cn/tags/%E9%A2%9C%E8%89%B2/"/>
    
      <category term="Filter" scheme="http://chuzhaozhi.cn/tags/Filter/"/>
    
      <category term="渲染" scheme="http://chuzhaozhi.cn/tags/%E6%B8%B2%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>多级Push页面后优雅的返回指定控制器几种方法</title>
    <link href="http://chuzhaozhi.cn/10633.html"/>
    <id>http://chuzhaozhi.cn/10633.html</id>
    <published>2018-08-06T03:38:15.851Z</published>
    <updated>2018-09-28T06:50:41.586Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在开发过程中我们可能会遇到不同的产品需求，例如说A–&gt;B–C，如果是层级返回的话我们只需要pop回去就好，但是如果是back到指定VC的时候，例如：A–&gt;B–C，然后从C回到A，在开发过程中还是遇到的比较多的，本文总结了常见的三种方法，以此记录一下。</blockquote></p><p><br><a id="more"></a></p><blockquote><p>使用场景：  A – &gt; B – &gt; C，然后现在要求C直接pop回到A。</p></blockquote><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><blockquote><p>C返回到B的时候写个回调，B接收到回调再自己pop到A，但是这个方法B的页面会闪现一下，用户体验不好，不推荐。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/4905848-e5cd66f226e6b509.gif?imageMogr2/auto-orient/strip" alt="方法一.gif"></p><p>实现代码：<br><code>C_ViewController.h</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;UIKit/UIKit.h&gt;</span><br><span class="line">typedef void (^backBlock)(void);     </span><br><span class="line"></span><br><span class="line">@interface C_ViewController : UIViewController</span><br><span class="line">@property (copy,nonatomic)backBlock backBlock;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><p><code>C_ViewController.m</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-(void)back</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    if (self.backBlock) &#123;</span><br><span class="line">        [self.navigationController popViewControllerAnimated:YES];</span><br><span class="line">        self.backBlock();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>B_ViewController实现方法</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C_ViewController *cViewController = [[C_ViewController alloc] init]; </span><br><span class="line"> [self.navigationController pushViewController:cViewController animated:YES];</span><br><span class="line"> cViewController.backBlock = ^&#123;</span><br><span class="line">     [self.navigationController popViewControllerAnimated:YES];</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><blockquote><p>在B push 到C的时候，直接把B从导航控制器的堆栈中移除。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/4905848-d401cbb31eb40ce9.gif?imageMogr2/auto-orient/strip" alt="方法二.gif"></p><p>实现方法：<br><code>B_ViewController实现方法</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//  方法二</span><br><span class="line">NSMutableArray *arrM = [[NSMutableArray alloc] initWithArray:self.navigationController.viewControllers];</span><br><span class="line">[arrM replaceObjectAtIndex:[arrM count]-1 withObject:cViewController];</span><br><span class="line">[self.navigationController setViewControllers:arrM animated:YES];</span><br></pre></td></tr></table></figure></p><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><blockquote><p>写一个UIViewController的catrgory，在C的backAct方法中使用</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/4905848-d066c1afd0093a64.gif?imageMogr2/auto-orient/strip" alt="方法三.gif"><br>实现方法：<br><code>UIViewController+BackToViewController.h</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;UIKit/UIKit.h&gt;</span><br><span class="line"></span><br><span class="line">@interface UIViewController (BackToViewController)</span><br><span class="line">-(void)backToController:(NSString *)controllerName animated:(BOOL )animaed;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><p><code>UIViewController+BackToViewController.m</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@implementation UIViewController (BackToViewController)</span><br><span class="line">-(void)backToController:(NSString *)controllerName animated:(BOOL)animaed&#123;</span><br><span class="line">    if (self.navigationController) &#123;</span><br><span class="line">        NSArray *controllers = self.navigationController.viewControllers;</span><br><span class="line">        NSArray *result = [controllers filteredArrayUsingPredicate:[NSPredicate predicateWithBlock:^BOOL(id  _Nullable evaluatedObject, NSDictionary&lt;NSString *,id&gt; * _Nullable bindings) &#123;</span><br><span class="line">            return [evaluatedObject isKindOfClass:NSClassFromString(controllerName)];</span><br><span class="line">        &#125;]];</span><br><span class="line">        if (result.count &gt; 0) &#123;</span><br><span class="line">            [self.navigationController popToViewController:result[0] animated:YES];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>在C_ViewController中使用</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 方法三</span><br><span class="line">    if(self.navigationController.viewControllers.count &lt;= 1)</span><br><span class="line">    &#123;</span><br><span class="line">        [self dismissViewControllerAnimated:YES completion:nil];</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        [self backToController:@&quot;ViewController&quot; animated:YES];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这是我个人用的三种方法，比较推荐第三种方法，如有更好的方法麻烦告知，大家共同进步，谢谢。</p></blockquote><p><a href="https://github.com/chuzhaozhi/PushAndBackDemo" target="_blank" rel="noopener">代码传送门</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在开发过程中我们可能会遇到不同的产品需求，例如说A–&amp;gt;B–C，如果是层级返回的话我们只需要pop回去就好，但是如果是back到指定VC的时候，例如：A–&amp;gt;B–C，然后从C回到A，在开发过程中还是遇到的比较多的，本文总结了常见的三种方法，以此记录一下。&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS程序异常Crash友好化处理</title>
    <link href="http://chuzhaozhi.cn/1258.html"/>
    <id>http://chuzhaozhi.cn/1258.html</id>
    <published>2018-06-04T07:33:50.000Z</published>
    <updated>2018-09-28T06:50:41.582Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前两天接到个面试，面试官问到上线的app怎么避免闪退，首先想到的就是在编码的时候进行各种容错，但貌似并不是面试官想要的答案，所以表现的很糟糕。今天有时间就来整理一下，希望有所帮助。实现效果如图：<br></blockquote><br><a id="more"></a></p><p><img src="https://upload-images.jianshu.io/upload_images/4905848-21bc956920f2ba63.gif?imageMogr2/auto-orient/strip" alt="carsh.gif"></p><h2 id="效果实现："><a href="#效果实现：" class="headerlink" title="效果实现："></a>效果实现：</h2><p><img src="https://upload-images.jianshu.io/upload_images/4905848-34a1195e5cc15ba6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="demo截图"></p><h2 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h2><p>1.将截图的中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.在```AppDelegate.m```中找到以下方法并如下添加代码：</span><br></pre></td></tr></table></figure></p><ul><li><p>(BOOL)application:(UIApplication <em>)application didFinishLaunchingWithOptions:(NSDictionary </em>)launchOptions {<br>  // Override point for customization after application launch.</p><p>  [UncaughtExceptionHandler installUncaughtExceptionHandler:YES showAlert:YES];<br>  return YES;<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">以上代码就可以实现稍微友好一点的crash拦截处理。</span><br><span class="line">## 代码解释：</span><br><span class="line">```UncaughtExceptionHandler.h```主要代码：</span><br></pre></td></tr></table></figure></li></ul><p>#import &lt;Foundation/Foundation.h&gt;</p><p>#import &lt;UIKit/UIKit.h&gt;</p><p>@interface UncaughtExceptionHandler : NSObject</p><p>/*!</p><ul><li>异常的处理方法<br>*</li><li>@param install   是否开启捕获异常</li><li>@param showAlert 是否在发生异常时弹出alertView<br>*/<ul><li>(void)installUncaughtExceptionHandler:(BOOL)install showAlert:(BOOL)showAlert;<br>@end<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```UncaughtExceptionHandler.m```文件主要的代码如下：</span><br><span class="line">#### 1.发送异常信号</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>/*</p><ul><li>异常的处理方法<br>*</li><li>@param install   是否开启捕获异常</li><li><p>@param showAlert 是否在发生异常时弹出alertView<br>*/</p><ul><li>(void)installUncaughtExceptionHandler:(BOOL)install showAlert:(BOOL)showAlert {</li></ul><p>if (install &amp;&amp; showAlert) {</p><pre><code>[[self alloc] alertView:showAlert];</code></pre><p>}</p><p>NSSetUncaughtExceptionHandler(install ? HandleException : NULL);<br>signal(SIGABRT, install ? SignalHandler : SIG_DFL);<br>signal(SIGILL, install ? SignalHandler : SIG_DFL);<br>signal(SIGSEGV, install ? SignalHandler : SIG_DFL);<br>signal(SIGFPE, install ? SignalHandler : SIG_DFL);<br>signal(SIGBUS, install ? SignalHandler : SIG_DFL);<br>signal(SIGPIPE, install ? SignalHandler : SIG_DFL);<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">　产生上述的signal的时候就会调用我们定义的```SignalHandler```来处理异常。</span><br><span class="line"> &gt; ps: NSSetUncaughtExceptionHandler就是iOS SDK中提供的一个现成的函数,用来捕获异常的方法，使用方便。但它不能捕获抛出的signal，所以定义了SignalHandler方法。</span><br><span class="line"></span><br><span class="line">#### 2.处理异常</span><br></pre></td></tr></table></figure></li></ul><p>void HandleException(NSException *exception) {</p><pre><code>int32_t exceptionCount = OSAtomicIncrement32(&amp;UncaughtExceptionCount);// 如果太多不用处理if (exceptionCount &gt; UncaughtExceptionMaximum) {    return;}//获取调用堆栈NSArray *callStack = [exception callStackSymbols];NSMutableDictionary *userInfo = [NSMutableDictionary dictionaryWithDictionary:[exception userInfo]];[userInfo setObject:callStack forKey:UncaughtExceptionHandlerAddressesKey];//在主线程中，执行制定的方法, withObject是执行方法传入的参数[[[UncaughtExceptionHandler alloc] init] performSelectorOnMainThread:@selector(handleException:) withObject: [NSException exceptionWithName:[exception name]                         reason:[exception reason]                       userInfo:userInfo] waitUntilDone:YES];</code></pre><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">该方法就是对应```NSSetUncaughtExceptionHandler```的处理，只要方法关联到这个函数，那么发生相应错误时会自动调用该函数，调用时会传入```exception```参数。获取异常后会将捕获的异常传入最终调用处理的```handleException```函数。</span><br><span class="line">#### 3.无法捕获的signal处理</span><br></pre></td></tr></table></figure><p>//处理signal报错<br>void SignalHandler(int signal) {</p><pre><code>int32_t exceptionCount = OSAtomicIncrement32(&amp;UncaughtExceptionCount);// 如果太多不用处理if (exceptionCount &gt; UncaughtExceptionMaximum) {    return;}NSString* description = nil;switch (signal) {    case SIGABRT:        description = [NSString stringWithFormat:@&quot;Signal SIGABRT was raised!\n&quot;];        break;    case SIGILL:        description = [NSString stringWithFormat:@&quot;Signal SIGILL was raised!\n&quot;];        break;    case SIGSEGV:        description = [NSString stringWithFormat:@&quot;Signal SIGSEGV was raised!\n&quot;];        break;    case SIGFPE:        description = [NSString stringWithFormat:@&quot;Signal SIGFPE was raised!\n&quot;];        break;    case SIGBUS:        description = [NSString stringWithFormat:@&quot;Signal SIGBUS was raised!\n&quot;];        break;    case SIGPIPE:        description = [NSString stringWithFormat:@&quot;Signal SIGPIPE was raised!\n&quot;];        break;    default:        description = [NSString stringWithFormat:@&quot;Signal %d was raised!&quot;,signal];}NSMutableDictionary *userInfo = [NSMutableDictionary dictionary];NSArray *callStack = [UncaughtExceptionHandler backtrace];[userInfo setObject:callStack forKey:UncaughtExceptionHandlerAddressesKey];[userInfo setObject:[NSNumber numberWithInt:signal] forKey:UncaughtExceptionHandlerSignalKey];//在主线程中，执行指定的方法, withObject是执行方法传入的参数[[[UncaughtExceptionHandler alloc] init] performSelectorOnMainThread:@selector(handleException:) withObject: [NSException exceptionWithName:UncaughtExceptionHandlerSignalExceptionName                         reason: description                       userInfo: userInfo] waitUntilDone:YES];</code></pre><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">以上方法是对于捕获不到的signal信号进行处理，列出常见的异常类型。</span><br><span class="line">#### 4.堆栈调用</span><br></pre></td></tr></table></figure><p>//获取调用堆栈</p><ul><li><p>(NSArray *)backtrace {</p><p>  //指针列表<br>  void<em> callstack[128];<br>  //backtrace用来获取当前线程的调用堆栈，获取的信息存放在这里的callstack中<br>  //128用来指定当前的buffer中可以保存多少个void</em>元素<br>  //返回值是实际获取的指针个数<br>  int frames = backtrace(callstack, 128);<br>  //backtrace_symbols将从backtrace函数获取的信息转化为一个字符串数组<br>  //返回一个指向字符串数组的指针<br>  //每个字符串包含了一个相对于callstack中对应元素的可打印信息，包括函数名、偏移地址、实际返回地址<br>  char **strs = backtrace_symbols(callstack, frames);</p><p>  int i;<br>  NSMutableArray *backtrace = [NSMutableArray arrayWithCapacity:frames];<br>  for (i = 0; i &lt; frames; i++) {</p><pre><code>[backtrace addObject:[NSString stringWithUTF8String:strs[i]]];</code></pre><p>  }<br>  free(strs);</p><p>  return backtrace;<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; backtrace是Linux下用来追踪函数调用堆栈以及定位段错误的函数。</span><br><span class="line">#### 5.使用UIAlerView进行友好化提示</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>(void)handleException:(NSException *)exception {</p><p>  [self validateAndSaveCriticalApplicationData:exception];</p><p>  if (!showAlertView) {</p><pre><code>return;</code></pre><p>  }</p></li></ul><p>#pragma clang diagnostic push</p><p>#pragma clang diagnostic ignored “-Wdeprecated-declarations”<br>    UIAlertView *alert =<br>    [[UIAlertView alloc]<br>     initWithTitle:@”出错啦”<br>     message:[NSString stringWithFormat:@”你可以尝试继续操作，但是应用可能无法正常运行.\n”]<br>     delegate:self<br>     cancelButtonTitle:@”退出”<br>     otherButtonTitles:@”继续”, nil];<br>    [alert show];</p><p>#pragma clang diagnostic pop</p><pre><code>CFRunLoopRef runLoop = CFRunLoopGetCurrent();CFArrayRef allModes = CFRunLoopCopyAllModes(runLoop);while (!self.dismissed) {    //点击继续    for (NSString *mode in (__bridge NSArray *)allModes) {        //快速切换Mode        CFRunLoopRunInMode((CFStringRef)mode, 0.001, false);    }}//点击退出CFRelease(allModes);NSSetUncaughtExceptionHandler(NULL);signal(SIGABRT, SIG_DFL);signal(SIGILL, SIG_DFL);signal(SIGSEGV, SIG_DFL);signal(SIGFPE, SIG_DFL);signal(SIGBUS, SIG_DFL);signal(SIGPIPE, SIG_DFL);if ([[exception name] isEqual:UncaughtExceptionHandlerSignalExceptionName]) {    kill(getpid(), [[[exception userInfo] objectForKey:UncaughtExceptionHandlerSignalKey] intValue]);} else {    [exception raise];}</code></pre><p>}<br><code>`</code></p><blockquote><p>在这里你可以做自己的crash收集操作，例如上传服务器等。</p></blockquote><h5 id="最后，我想说对网上给的这个拦截处理个人理解的不是很透彻，借鉴了多位大牛的技术分享，如果有新的解决方案，麻烦评论告诉我，大家一起共同进步。本文已同步至本人博客"><a href="#最后，我想说对网上给的这个拦截处理个人理解的不是很透彻，借鉴了多位大牛的技术分享，如果有新的解决方案，麻烦评论告诉我，大家一起共同进步。本文已同步至本人博客" class="headerlink" title="最后，我想说对网上给的这个拦截处理个人理解的不是很透彻，借鉴了多位大牛的技术分享，如果有新的解决方案，麻烦评论告诉我，大家一起共同进步。本文已同步至本人博客"></a>最后，我想说对网上给的这个拦截处理个人理解的不是很透彻，借鉴了多位大牛的技术分享，如果有新的解决方案，麻烦评论告诉我，大家一起共同进步。本文已同步至<a href="http://chuzhaozhi.cn/">本人博客</a></h5><blockquote><p><a href="https://github.com/chuzhaozhi/CrashCatched" target="_blank" rel="noopener">代码传送门</a><br><a href="http://chuzhaozhi.cn/">更多文章</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;前两天接到个面试，面试官问到上线的app怎么避免闪退，首先想到的就是在编码的时候进行各种容错，但貌似并不是面试官想要的答案，所以表现的很糟糕。今天有时间就来整理一下，希望有所帮助。实现效果如图：&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="ios" scheme="http://chuzhaozhi.cn/categories/ios/"/>
    
    
      <category term="Carsh" scheme="http://chuzhaozhi.cn/tags/Carsh/"/>
    
      <category term="崩溃拦截" scheme="http://chuzhaozhi.cn/tags/%E5%B4%A9%E6%BA%83%E6%8B%A6%E6%88%AA/"/>
    
  </entry>
  
  <entry>
    <title>iOS中优雅的使用iconfont</title>
    <link href="http://chuzhaozhi.cn/20558.html"/>
    <id>http://chuzhaozhi.cn/20558.html</id>
    <published>2018-04-04T08:32:40.000Z</published>
    <updated>2018-09-28T06:50:41.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是iconfont"><a href="#1-什么是iconfont" class="headerlink" title="1.什么是iconfont"></a>1.什么是iconfont</h2><blockquote class="blockquote-center"><br>&ensp;&ensp;&ensp;&ensp;iconFont拆开来看，就是 Icon + Font，这样估计大家应该都能理解是什么，那两者结合是什么呢？没错！就是 IconFont ！让开发者像使用字体一样使用图标。如果自己不会做的话，可以直接去阿里的<a href="http://www.iconfont.cn/" target="_blank" rel="noopener">iconfont图标库</a>下载自己需要的图标。<br></blockquote><h2 id="2-为什么要使用iconfont"><a href="#2-为什么要使用iconfont" class="headerlink" title="2.为什么要使用iconfont"></a>2.为什么要使用iconfont</h2><p>&ensp;&ensp;&ensp;&ensp;在开发项目时，不可避免的会用到各种图标，为了适配不同的设备，通常需要@2x和@3x两套图，例如说我们tabBar上使用的图标。有些app有换肤的需要，还需要多套不同的图来进行匹配不同的主题。如果使用切图，这对于设计和开发来说无疑是增加了工作量，而且ipa的体积也会增大。</p><p>使用iconfont的好处:</p><ol><li>减小ipa包的大小</li><li>图标保真缩放，多设备适配一套图解决问题</li><li>适应换肤要求，使用方便。</li></ol><h2 id="3-怎么用iconfont"><a href="#3-怎么用iconfont" class="headerlink" title="3.怎么用iconfont"></a>3.怎么用iconfont</h2><h6 id="1-首先去iconfont图标库下载自己需要的图标。"><a href="#1-首先去iconfont图标库下载自己需要的图标。" class="headerlink" title="1. 首先去iconfont图标库下载自己需要的图标。"></a>1. 首先去<a href="http://www.iconfont.cn/" target="_blank" rel="noopener">iconfont图标库</a>下载自己需要的图标。</h6><p><img src="https://user-gold-cdn.xitu.io/2018/4/4/1628fbd94fa67dea?w=419&amp;h=272&amp;f=gif&amp;s=19630995" alt="下载图片"></p><p>如图我们可以选择自己需要的icon加入到购物车，然后加入项目里，当然你也可以直接在购物车直接下载，但是这样只是没有修改icon为自己想要的样式，加入项目中，你可以自己任意修改icon为自己想要的样式。<br><img src="https://user-gold-cdn.xitu.io/2018/4/4/1628fb988bc5fcbc?w=1240&amp;h=754&amp;f=jpeg&amp;s=34197" alt="购物车直接下载"></p><blockquote><p>注意：这里是下载代码，这样我们就可以在项目中直接使用</p></blockquote><h6 id="2-将下载下来的icon资源添加到自己的项目中。"><a href="#2-将下载下来的icon资源添加到自己的项目中。" class="headerlink" title="2.将下载下来的icon资源添加到自己的项目中。"></a>2.将下载下来的icon资源添加到自己的项目中。</h6><p><img src="https://user-gold-cdn.xitu.io/2018/4/4/1628fb988c1c16e4?w=1108&amp;h=858&amp;f=jpeg&amp;s=102941" alt="下载之后文件夹内容"><br>我们所需要的就是这个iconfont.ttf，对于这个ttf文件，我想我们并不陌生吧。新建项目，将这个ttf文件拖入自己的项目里。<br><img src="https://user-gold-cdn.xitu.io/2018/4/4/1628fb988c2668b4?w=1240&amp;h=670&amp;f=jpeg&amp;s=81590" alt="加入项目"></p><blockquote><p>注意：勾选如图选项</p></blockquote><p>接下来配置项目加载这个文件</p><ul><li>检查文件是否在项目中，不然会崩溃<br><img src="https://user-gold-cdn.xitu.io/2018/4/4/1628fb988c25f899?w=1240&amp;h=605&amp;f=jpeg&amp;s=73436" alt="check"></li><li>在plist文件中加入字体<br><img src="https://user-gold-cdn.xitu.io/2018/4/4/1628fbe92dd04385?w=840&amp;h=524&amp;f=gif&amp;s=29884118" alt="plist"><br>接下来我们借助淘点点科技写的一个关于iconfont封装，方便我们使用iconfont。iconfont的封装包括<br><img src="https://user-gold-cdn.xitu.io/2018/4/4/1628fb988d49c856?w=436&amp;h=338&amp;f=jpeg&amp;s=19892" alt="工具类"></li></ul><ol><li><p><code>TBCityIconInfo.h</code>的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &lt;UIKit/UIKit.h&gt;</span><br><span class="line"></span><br><span class="line">@interface TBCityIconInfo : NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) NSString *text;</span><br><span class="line">@property (nonatomic, assign) NSInteger size;</span><br><span class="line">@property (nonatomic, strong) UIColor *color;</span><br><span class="line"></span><br><span class="line">- (instancetype)initWithText:(NSString *)text size:(NSInteger)size color:(UIColor *)color;</span><br><span class="line">+ (instancetype)iconInfoWithText:(NSString *)text size:(NSInteger)size color:(UIColor *)color;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></li><li><p><code>TBCityIconInfo.m</code>的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;TBCityIconInfo.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation TBCityIconInfo</span><br><span class="line"></span><br><span class="line">- (instancetype)initWithText:(NSString *)text size:(NSInteger)size color:(UIColor *)color &#123;</span><br><span class="line">if (self = [super init]) &#123;</span><br><span class="line">self.text = text;</span><br><span class="line">self.size = size;</span><br><span class="line">self.color = color;</span><br><span class="line">&#125;</span><br><span class="line">return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (instancetype)iconInfoWithText:(NSString *)text size:(NSInteger)size color:(UIColor *)color &#123;</span><br><span class="line">return [[TBCityIconInfo alloc] initWithText:text size:size color:color];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></li><li><p><code>TBCityIconFont.h</code>的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;UIImage+TBCityIconFont.h&quot;</span><br><span class="line">#import &quot;TBCityIconInfo.h&quot;</span><br><span class="line"></span><br><span class="line">#define TBCityIconInfoMake(text, imageSize, imageColor) [TBCityIconInfo iconInfoWithText:text size:imageSize color:imageColor]</span><br><span class="line"></span><br><span class="line">@interface TBCityIconFont : NSObject</span><br><span class="line"></span><br><span class="line">+ (UIFont *)fontWithSize: (CGFloat)size;</span><br><span class="line">+ (void)setFontName:(NSString *)fontName;</span><br></pre></td></tr></table></figure></li><li><p><code>TBCityIconFont.m</code>的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;TBCityIconFont.h&quot;</span><br><span class="line">#import &lt;CoreText/CoreText.h&gt;</span><br><span class="line"></span><br><span class="line">@implementation TBCityIconFont</span><br><span class="line"></span><br><span class="line">static NSString *_fontName;</span><br><span class="line"></span><br><span class="line">+ (void)registerFontWithURL:(NSURL *)url &#123;</span><br><span class="line">NSAssert([[NSFileManager defaultManager] fileExistsAtPath:[url path]], @&quot;Font file doesn&apos;t exist&quot;);</span><br><span class="line">CGDataProviderRef fontDataProvider = CGDataProviderCreateWithURL((__bridge CFURLRef)url);</span><br><span class="line">CGFontRef newFont = CGFontCreateWithDataProvider(fontDataProvider);</span><br><span class="line">CGDataProviderRelease(fontDataProvider);</span><br><span class="line">CTFontManagerRegisterGraphicsFont(newFont, nil);</span><br><span class="line">CGFontRelease(newFont);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (UIFont *)fontWithSize:(CGFloat)size &#123;</span><br><span class="line">UIFont *font = [UIFont fontWithName:[self fontName] size:size];</span><br><span class="line">if (font == nil) &#123;</span><br><span class="line">NSURL *fontFileUrl = [[NSBundle mainBundle] URLForResource:[self fontName] withExtension:@&quot;ttf&quot;];</span><br><span class="line">[self registerFontWithURL: fontFileUrl];</span><br><span class="line">font = [UIFont fontWithName:[self fontName] size:size];</span><br><span class="line">NSAssert(font, @&quot;UIFont object should not be nil, check if the font file is added to the application bundle and you&apos;re using the correct font name.&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return font;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (void)setFontName:(NSString *)fontName &#123;</span><br><span class="line">_fontName = fontName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ (NSString *)fontName &#123;</span><br><span class="line">return _fontName ? : @&quot;iconfont&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></li><li><p><code>UIImage+TBCityIconFont.h</code>的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;UIKit/UIKit.h&gt;</span><br><span class="line">#import &quot;TBCityIconInfo.h&quot;</span><br><span class="line"></span><br><span class="line">@interface UIImage (TBCityIconFont)</span><br><span class="line"></span><br><span class="line">+ (UIImage *)iconWithInfo:(TBCityIconInfo *)info;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></li><li><p><code>UIImage+TBCityIconFont.m</code>的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;UIImage+TBCityIconFont.h&quot;</span><br><span class="line">#import &quot;TBCityIconFont.h&quot;</span><br><span class="line">#import &lt;CoreText/CoreText.h&gt;</span><br><span class="line"></span><br><span class="line">@implementation UIImage (TBCityIconFont)</span><br><span class="line"></span><br><span class="line">+ (UIImage *)iconWithInfo:(TBCityIconInfo *)info &#123;</span><br><span class="line">CGFloat size = info.size;</span><br><span class="line">CGFloat scale = [UIScreen mainScreen].scale;</span><br><span class="line">CGFloat realSize = size * scale;</span><br><span class="line">UIFont *font = [TBCityIconFont fontWithSize:realSize];</span><br><span class="line">UIGraphicsBeginImageContext(CGSizeMake(realSize, realSize));</span><br><span class="line">CGContextRef context = UIGraphicsGetCurrentContext();</span><br><span class="line"></span><br><span class="line">if ([info.text respondsToSelector:@selector(drawAtPoint:withAttributes:)]) &#123;</span><br><span class="line">/**</span><br><span class="line">* 如果这里抛出异常，请打开断点列表，右击All Exceptions -&gt; Edit Breakpoint -&gt; All修改为Objective-C</span><br><span class="line">* See: http://stackoverflow.com/questions/1163981/how-to-add-a-breakpoint-to-objc-exception-throw/14767076#14767076</span><br><span class="line">*/</span><br><span class="line">[info.text drawAtPoint:CGPointZero withAttributes:@&#123;NSFontAttributeName:font, NSForegroundColorAttributeName: info.color&#125;];</span><br><span class="line">&#125; else &#123;</span><br><span class="line"></span><br><span class="line">#pragma clang diagnostic push</span><br><span class="line">#pragma clang diagnostic ignored &quot;-Wdeprecated-declarations&quot;</span><br><span class="line">CGContextSetFillColorWithColor(context, info.color.CGColor);</span><br><span class="line">[info.text drawAtPoint:CGPointMake(0, 0) withFont:font];</span><br><span class="line">#pragma clang pop</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">UIImage *image = [UIImage imageWithCGImage:UIGraphicsGetImageFromCurrentImageContext().CGImage scale:scale orientation:UIImageOrientationUp];</span><br><span class="line">UIGraphicsEndImageContext();</span><br><span class="line"></span><br><span class="line">return image;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></li></ol><h5 id="3-具体使用方法"><a href="#3-具体使用方法" class="headerlink" title="3.具体使用方法"></a>3.具体使用方法</h5><p>1.在<code>AppDelegate.m</code>中，初始化iconfont<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;AppDelegate.h&quot;</span><br><span class="line">#import &quot;TBCityIconFont.h&quot;</span><br><span class="line">#import &quot;ViewController.h&quot;</span><br><span class="line">@interface AppDelegate ()</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation AppDelegate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</span><br><span class="line">// Override point for customization after application launch.</span><br><span class="line">[TBCityIconFont setFontName:@&quot;iconfont&quot;];</span><br><span class="line">UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:[ViewController new]];</span><br><span class="line">self.window.rootViewController = nav;</span><br><span class="line">[self.window makeKeyAndVisible];</span><br><span class="line">return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="2"><li>在<code>ViewController.m</code>中实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;ViewController.h&quot;</span><br><span class="line">#import &quot;TBCityIconFont.h&quot;</span><br><span class="line">#import &quot;UIImage+TBCityIconFont.h&quot;</span><br><span class="line">@interface ViewController ()</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation ViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">[super viewDidLoad];</span><br><span class="line">self.view.backgroundColor = [UIColor  whiteColor];</span><br><span class="line">UIImageView *imageView = [[UIImageView alloc] initWithFrame:CGRectMake(100, 100, 30, 30)];</span><br><span class="line">[self.view addSubview:imageView];</span><br><span class="line">//图标编码是&amp;#xe600，需要转成\U0000e600</span><br><span class="line">imageView.image = [UIImage iconWithInfo:TBCityIconInfoMake(@&quot;\U0000e600&quot;, 30, [UIColor redColor])];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//    button</span><br><span class="line">UIButton *button = [UIButton buttonWithType:UIButtonTypeSystem];</span><br><span class="line">button.frame = CGRectMake(100, 150, 40, 40);</span><br><span class="line">[self.view addSubview:button];</span><br><span class="line">[button setImage:[UIImage iconWithInfo:TBCityIconInfoMake(@&quot;\U0000e614&quot;, 40, [UIColor redColor])] forState:UIControlStateNormal];</span><br><span class="line"></span><br><span class="line">//    label,label可以将文字与图标结合一起，直接用label的text属性将图标显示出来</span><br><span class="line">UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(50, 200, 280, 40)];</span><br><span class="line">[self.view addSubview:label];</span><br><span class="line">label.font = [UIFont fontWithName:@&quot;iconfont&quot; size:15];//设置label的字体</span><br><span class="line">label.text = @&quot;在lable上显示  \U0000e658&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Do any additional setup after loading the view, typically from a nib.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)didReceiveMemoryWarning &#123;</span><br><span class="line">[super didReceiveMemoryWarning];</span><br><span class="line">// Dispose of any resources that can be recreated.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></li></ol><p>结果如下图所示：<br><img src="https://user-gold-cdn.xitu.io/2018/4/4/1628fb988bfb497c?w=748&amp;h=1370&amp;f=jpeg&amp;s=28831" alt="显示结果"></p><blockquote><p>注意：</p><ol><li>所用到的unicode编码需要自己手动将&amp;#xXXXX格式转换成\UXXXXXXXX格式，例如//图标编码是&amp;#xe600，需要转成\U0000e600</li><li>所有需要的unicode编码都可以在下载的iconfont文件夹中的.html文件打开查看<br><img src="https://user-gold-cdn.xitu.io/2018/4/4/1628fb98b5f56ef5?w=1240&amp;h=753&amp;f=jpeg&amp;s=86665" alt="uiicode编码"></li></ol></blockquote><blockquote><p>本文<a href="https://github.com/chuzhaozhi/iconfontDemo" target="_blank" rel="noopener">demo</a>,欢迎批评指正，留下你的star哦。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-什么是iconfont&quot;&gt;&lt;a href=&quot;#1-什么是iconfont&quot; class=&quot;headerlink&quot; title=&quot;1.什么是iconfont&quot;&gt;&lt;/a&gt;1.什么是iconfont&lt;/h2&gt;&lt;blockquote class=&quot;blockquote
      
    
    </summary>
    
    
      <category term="ios" scheme="http://chuzhaozhi.cn/tags/ios/"/>
    
      <category term="iconfont" scheme="http://chuzhaozhi.cn/tags/iconfont/"/>
    
  </entry>
  
  <entry>
    <title>Xcode9-Safe-Area-Layout-Guide-Before-iOS9-0报错解决</title>
    <link href="http://chuzhaozhi.cn/45450.html"/>
    <id>http://chuzhaozhi.cn/45450.html</id>
    <published>2018-03-31T07:59:40.000Z</published>
    <updated>2018-09-28T06:50:41.578Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br> 9月20日苹果爸爸推送了iOS11.0以及Xcode9,作为开发小白一枚，第一时间更新了Xcode9,去体验一下所谓的跨时代的iPhone X,像往常新建个新项目，结果一运行直接报错<br></blockquote><br><a id="more"></a><br><img src="http://upload-images.jianshu.io/upload_images/4905848-a869700e765c7aa9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="问题一.png"><br>（弱弱的说一句，这个xcode9好像并没有那么友好~）<br>然后一Google，苹果爸爸在苹果在iOS7中引入的Top Layout Guide和Bottom Layout Guide,这些布局指南在iOS 11中被弃用，取而代之的是Safe Area Layout Guide.<br>针对新特性，解决方案如下<br>第一步、在项目报错地方打开右边工具栏找到如图位置选中<code>View Controller</code>，去掉<code>Use Safe Area Layout Guides</code><br><img src="http://upload-images.jianshu.io/upload_images/4905848-822db122e4b09814.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="解决一.png"><br> 第二步、切换到<code>Main.storyboard</code>文件,重读第一步操作打开右边工具栏找到如图位置选中<code>View Controller</code>，去掉<code>Use Safe Area Layout Guides</code></p><p><img src="http://upload-images.jianshu.io/upload_images/4905848-20c763e7c4ee3077.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="解决一2.png"></p><h3 id="到这就解决了这个问题，当然iOS11和Xcode9还有其他新特性，一点点整理解决。"><a href="#到这就解决了这个问题，当然iOS11和Xcode9还有其他新特性，一点点整理解决。" class="headerlink" title="到这就解决了这个问题，当然iOS11和Xcode9还有其他新特性，一点点整理解决。"></a>到这就解决了这个问题，当然iOS11和Xcode9还有其他新特性，一点点整理解决。</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt; 9月20日苹果爸爸推送了iOS11.0以及Xcode9,作为开发小白一枚，第一时间更新了Xcode9,去体验一下所谓的跨时代的iPhone X,像往常新建个新项目，结果一运行直接报错&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Xcode" scheme="http://chuzhaozhi.cn/categories/Xcode/"/>
    
    
      <category term="Xcode" scheme="http://chuzhaozhi.cn/tags/Xcode/"/>
    
      <category term="自适应" scheme="http://chuzhaozhi.cn/tags/%E8%87%AA%E9%80%82%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>iOS微信支付以及工具类</title>
    <link href="http://chuzhaozhi.cn/21387.html"/>
    <id>http://chuzhaozhi.cn/21387.html</id>
    <published>2018-03-31T07:59:40.000Z</published>
    <updated>2018-09-28T06:50:41.577Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>在刚刚结束的一个项目中用到了微信支付，从接入微信支付到工具类的封装，在本文中做个积累，方便日后使用。<br></blockquote><br><a id="more"></a></p><h2 id="1-开始接入微信支付的准备工作"><a href="#1-开始接入微信支付的准备工作" class="headerlink" title="1.开始接入微信支付的准备工作"></a>1.开始接入微信支付的准备工作</h2><p><img src="https://user-gold-cdn.xitu.io/2018/4/3/1628a5deef9ccd64?w=700&amp;h=226&amp;f=png&amp;s=89227" alt="接入流程.png"></p><p>首先你需要去<a href="https://open.weixin.qq.com/" target="_blank" rel="noopener">微信开放平台</a>注册账号,在这里要吐槽一下，不知道这个微信平台的账号密码验证机制，忘了以前的密码，重新登录，各种找回密码都不行，实在没辙，去注册个Gmail😑，登录成功后，可以看到如下界面。<br><img src="https://user-gold-cdn.xitu.io/2018/4/3/1628a5deef8f0630?w=1240&amp;h=299&amp;f=jpeg&amp;s=22223" alt="1.png"></p><p>点击右上角的创建移动应用，一步一步填写必要填入的信息，在这里就不做多余的赘述了。<br>需要注意的是这里填入的<br>Bundle ID需要和项目的一一对应<br><img src="https://user-gold-cdn.xitu.io/2018/4/3/1628a5deef7c4285?w=1240&amp;h=685&amp;f=jpeg&amp;s=50365" alt="BoundleId"><br>接下来就等一个星期左右，等待微信审核通过你就可以将微信支付SDK集成到项目中，详情可以看官方给出的<a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=1417694084&amp;token=&amp;lang=zh_CN" target="_blank" rel="noopener">文档</a>.<br>pod 集成方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;WechatOpenSDK&apos;</span><br></pre></td></tr></table></figure></p><p>在Xcode中，选择你的工程设置项，选中“TARGETS”一栏，在“info”标签栏的“URL type“添加“URL scheme”为你所注册的应用程序id（如下图所示）。<br><img src="https://user-gold-cdn.xitu.io/2018/4/3/1628a5deefa04e0d?w=1240&amp;h=355&amp;f=jpeg&amp;s=38183" alt="URL scheme"></p><p>完成之后可以获取到appid(微信开放平台为应用生成的唯一识别码)、商户id、商户secretKey。对于app端来说只用到appid，商户id最好通过接口从server获取，商户secretKey是用来签名的，一般只有server能用到。</p><h2 id="2-支付流程"><a href="#2-支付流程" class="headerlink" title="2.支付流程"></a>2.支付流程</h2><p><img src="https://user-gold-cdn.xitu.io/2018/4/3/1628a5def1793359?w=894&amp;h=1042&amp;f=png&amp;s=35742" alt="支付流程.png"></p><p>刚开始看这个流程图可能会觉得很复杂，所以总结了我们比较关系的流程是：</p><ol><li>app客户端向服务器发送支付请求</li><li>服务器在收到客户端请求之后向微信后台调用统一下单API,获得预付单信息</li><li>服务端生成带签名的客户端支付信息给app</li><li>app客户端用户确认支付，app唤醒微信客户端进行支付</li><li>app获得支付结果后向服务端查询最终的结果并显示</li></ol><h5 id="app端的工作："><a href="#app端的工作：" class="headerlink" title="app端的工作："></a>app端的工作：</h5><ul><li>接入微信支付SDK</li><li>向服务器发送支付请求</li><li>支付信息唤醒微信app,然后进行支付</li><li>收到微信支付回调后向服务器确认支付结果</li><li>根据查询结果展示结果页面告知用户支付结果</li></ul><h5 id="服务器端的工作："><a href="#服务器端的工作：" class="headerlink" title="服务器端的工作："></a>服务器端的工作：</h5><ul><li>收到app客户端支付请求后向微信后台请求预支付订单</li><li>服务器端签名并返回信息给app客户端</li><li>接收微信后台返回的支付结果，用来app端查询</li></ul><blockquote><p>服务器端返回的字段说明：</p><blockquote></blockquote><ul><li>appId:返回的appid</li><li>partnerId: 父级id</li><li>prepayId: 支付id</li><li>packages: 包名（微信默认的为“Sign=WXPay”）</li><li>nonceStr: 生成的随机字符串</li><li>timesTamp: 时间戳</li><li>sign: 签名<br><img src="https://user-gold-cdn.xitu.io/2018/4/3/1628a5deef9724d9?w=1240&amp;h=599&amp;f=jpeg&amp;s=89869" alt="字段说明"> </li></ul></blockquote><h2 id="3-iOS端使用"><a href="#3-iOS端使用" class="headerlink" title="3.iOS端使用"></a>3.iOS端使用</h2><p>在<code>AppDelegate.m</code>,导入微信SDK头文件<code>WXApi.h</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</span><br><span class="line">[WXApi registerApp:@&quot;注册获得的appid&quot;];//注册appid</span><br><span class="line">return YES;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//支持所有iOS系统回调</span><br><span class="line">- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation</span><br><span class="line">&#123;</span><br><span class="line">//    [self handleOpenURL:url];</span><br><span class="line">BOOL result = [[UMSocialManager defaultManager] handleOpenURL:url sourceApplication:sourceApplication annotation:annotation];</span><br><span class="line">if (!result) &#123;</span><br><span class="line">// 其他如支付等SDK的回调</span><br><span class="line">[self handleOpenURL:url];</span><br><span class="line">&#125;</span><br><span class="line">return YES;</span><br><span class="line">&#125;</span><br><span class="line">- (void)handleOpenURL:(NSURL*)url &#123;</span><br><span class="line">if ([url.host isEqualToString:@&quot;pay&quot;]) &#123; // -- 微信支付</span><br><span class="line">[WXApi handleOpenURL:url delegate:[WXPayService sharedInstance]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>此处的<code>WXPayService</code>就是自己单独抽出来写的一个类，遵循<code>WXApiManagerDelegate</code>协议</p></blockquote><h5 id="WXPayService-h"><a href="#WXPayService-h" class="headerlink" title="WXPayService.h"></a>WXPayService.h</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &quot;WXApi.h&quot;</span><br><span class="line">@interface WXPayService : NSObject &lt;WXApiDelegate&gt;</span><br><span class="line">///单例来接收微信请求的回调</span><br><span class="line">+ (instancetype)sharedInstance;</span><br><span class="line">// -- 根据接口返回的预支付信息,构造支付请求</span><br><span class="line">+ (PayReq *)getPayRequest:(NSDictionary *)prepayData;</span><br><span class="line"></span><br><span class="line">///处理非支付请求的回调</span><br><span class="line">- (void)onRespCallBack:(void(^)(BaseResp * resp))callback;</span><br><span class="line">///从服务器端获取到微信返回的支付请求用到的参数来发起支付请求</span><br><span class="line">- (void)startPayWithReq:(PayReq *)req callback:(void(^)(BaseResp * resp))callback; </span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h5 id="WXPayService-m"><a href="#WXPayService-m" class="headerlink" title="WXPayService.m"></a>WXPayService.m</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#import &quot;WXPayService.h&quot;</span><br><span class="line">@interface WXPayService ()</span><br><span class="line">@property (nonatomic,copy) void(^RespCallBack)(BaseResp *);</span><br><span class="line">@end</span><br><span class="line">static WXPayService *sharedInstance;</span><br><span class="line"></span><br><span class="line">@implementation WXPayService</span><br><span class="line">+ (instancetype)allocWithZone:(struct _NSZone *)zone&#123;</span><br><span class="line">static dispatch_once_t onceToken;</span><br><span class="line">dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">sharedInstance = [super allocWithZone:zone];</span><br><span class="line">&#125;);</span><br><span class="line">return sharedInstance;</span><br><span class="line">&#125;</span><br><span class="line">///单例来接收微信请求的回调</span><br><span class="line">+ (instancetype)sharedInstance &#123;</span><br><span class="line">static dispatch_once_t onceToken;</span><br><span class="line">dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">sharedInstance = [[self alloc] init];</span><br><span class="line">&#125;);</span><br><span class="line">return sharedInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// -- 根据接口返回的预支付信息,构造支付请求</span><br><span class="line">+ (PayReq *)getPayRequest:(NSDictionary *)prepayData &#123;</span><br><span class="line">if (prepayData) &#123;</span><br><span class="line">//  此处Tools是自己的另一个工具类，用来判断字典的</span><br><span class="line">PayReq *req = [[PayReq alloc] init];</span><br><span class="line">if ([Tools dicContain:prepayData withKey:@&quot;partnerid&quot;]) &#123;</span><br><span class="line">req.partnerId = prepayData[@&quot;partnerid&quot;];</span><br><span class="line">&#125;</span><br><span class="line">if ([Tools dicContain:prepayData withKey:@&quot;prepayid&quot;]) &#123;</span><br><span class="line">req.prepayId = prepayData[@&quot;prepayid&quot;];</span><br><span class="line">&#125;</span><br><span class="line">if ([Tools dicContain:prepayData withKey:@&quot;noncestr&quot;]) &#123;</span><br><span class="line">req.nonceStr = prepayData[@&quot;noncestr&quot;];</span><br><span class="line">&#125;</span><br><span class="line">if ([Tools dicContain:prepayData withKey:@&quot;timestamp&quot;]) &#123;</span><br><span class="line">req.timeStamp = [prepayData[@&quot;timestamp&quot;] intValue];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req.package =@&quot;Sign=WXPay&quot;;</span><br><span class="line">req.sign =  @&quot;null&quot;;</span><br><span class="line">//日志输出</span><br><span class="line">NSLog(@&quot;appid=%@/npartid=%@/nprepayid=%@/nnoncestr=%@/ntimestamp=%ld/npackage=%@/nsign=%@&quot;,[prepayData objectForKey:@&quot;appid&quot;],req.partnerId,req.prepayId,req.nonceStr,(long)req.timeStamp,req.package,req.sign);</span><br><span class="line">return req;</span><br><span class="line">&#125;</span><br><span class="line">return nil;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">///处理非支付请求的回调</span><br><span class="line">- (void)onRespCallBack:(void(^)(BaseResp * resp))callback &#123;</span><br><span class="line">self.RespCallBack = callback;</span><br><span class="line">&#125;</span><br><span class="line">///从服务器端获取到微信返回的支付请求用到的参数来发起支付请求</span><br><span class="line">- (void)startPayWithReq:(PayReq *)req callback:(void(^)(BaseResp * resp))callback &#123;</span><br><span class="line">NSAssert(req !=nil , @&quot;未成功创建微信支付请求&quot;);</span><br><span class="line">self.RespCallBack = callback;</span><br><span class="line">if ([WXApi isWXAppInstalled]) &#123; // -- 判断是否安装微信应用</span><br><span class="line">//发起微信支付,设置参数</span><br><span class="line">[WXApi sendReq:req];</span><br><span class="line">&#125;else &#123;</span><br><span class="line">self.RespCallBack(nil);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark WXApiDelegate</span><br><span class="line">- (void)onResp:(BaseResp *)resp &#123;</span><br><span class="line">if ([resp isKindOfClass:[PayResp class]]) &#123; // -- 判断是否为支付的回调</span><br><span class="line">self.RespCallBack(resp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>在需要支付的ViewController中导入工具类<code>WXPayService</code><br><img src="https://user-gold-cdn.xitu.io/2018/4/3/1628a5df0fd34ad6?w=1240&amp;h=695&amp;f=jpeg&amp;s=97948" alt="pay.png"></p><h2 id="4-注意点及问题"><a href="#4-注意点及问题" class="headerlink" title="4.注意点及问题"></a>4.注意点及问题</h2><h4 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h4><ul><li>设置好scheme,否则应用无法跳转到微信客户端</li><li>支付签名时的key值全部是小写的</li><li>如果支付显示验证签名失败<br>的时候，可以将packages设为默认值(Sign=WXPay)试试</li></ul><h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><blockquote><p>系统版本大于等于iOS9的，调起微信客户端之后，可以直接点击状态栏左侧按钮返回，这时是不走回调方法的。</p></blockquote><p>解决方案：<br>在AppDelegate.m的applicationWillEnterForeground方法中，调用查询支付结果接口然后刷新当然页面。需要设置bool变量作为标志，否则每次应用进入前台都去查询，就不符合业务要求了。</p><blockquote><p>进入微信支付页面之后，不做操作，切换到自己应用中，退出当前支付页面，然后再进入微信客户端点击支付或者取消，此时自己的应用会崩溃闪退</p></blockquote><p>原因：退出页面后页面已经出栈被销毁，但wx回调时还是去调用其中的代理方法，就会出现野指针。<br>解决方案：在页面的<code>viewWillDisappear</code>方法中加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[WXPayService sharedManager].delegate = nil;</span><br></pre></td></tr></table></figure></p><h2 id="5-结束语"><a href="#5-结束语" class="headerlink" title="5.结束语"></a>5.结束语</h2><p>微信支付签名建议和服务端协商做二次签名，以保证支付的安全性。<br>ps: 如有不对的地方，欢迎批评指正，另外安利一下个人的<a href="http://www.chuzhaozhi.cn" target="_blank" rel="noopener">博客</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;在刚刚结束的一个项目中用到了微信支付，从接入微信支付到工具类的封装，在本文中做个积累，方便日后使用。&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>xxx.app文件已损坏，打不开，解决方案</title>
    <link href="http://chuzhaozhi.cn/14523.html"/>
    <id>http://chuzhaozhi.cn/14523.html</id>
    <published>2018-03-31T07:59:40.000Z</published>
    <updated>2018-09-28T06:50:41.583Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center"><br>现在很多软件是收费的，对于像我等穷屌丝来说，自然是想去找个破解的软件来替代，这个时候遇到xxx.app文件已损坏，打不开的情况，要怎么办呢，别急，以下操作就可以完美解决你的问题。<br></blockquote><br><a id="more"></a><br><img src="http://upload-images.jianshu.io/upload_images/4905848-aca7194695daddb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文件已损坏提示.png"></p><p>在Mac OS 更新到10.12之后，苹果爸爸对软件安全更加注重，在10.12之后你将看不到<code>任何来源</code>这个选项了</p><p><img src="http://upload-images.jianshu.io/upload_images/4905848-0ca1daa82e234279.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="允许任何来源.png"></p><p>那么，我们在Mac OS 10.12之后要怎么才能显示这个任何来源的选项呢，其实很简单，你只需要在终端里输入<code>sudo spctl --master-disable</code></p><p><img src="http://upload-images.jianshu.io/upload_images/4905848-0465eb1fc304cfff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输入命令.png"><br>这个时候会提示你输入电脑密码，（你输入的会不显示出来）输入密码后点击回车键，这个时候就打开了</p><p><img src="http://upload-images.jianshu.io/upload_images/4905848-d0509b61fb6e5a4f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="打开选项.jpg"><br>这个时候，点击左下角的<code>🔐</code>,会让你输入电脑密码<br><img src="http://upload-images.jianshu.io/upload_images/4905848-a9e47dd978b567b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输入密码.png"><br>之后就可以选择任何来源了</p><p><img src="http://upload-images.jianshu.io/upload_images/4905848-abf1997c19032134.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="提示.png"><br>点击<code>允许任何来源</code><br>这个时候你就可以打开之前提示文件损坏的软件了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;现在很多软件是收费的，对于像我等穷屌丝来说，自然是想去找个破解的软件来替代，这个时候遇到xxx.app文件已损坏，打不开的情况，要怎么办呢，别急，以下操作就可以完美解决你的问题。&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>UITableViewCell上的输入框，输入不同内容</title>
    <link href="http://chuzhaozhi.cn/28824.html"/>
    <id>http://chuzhaozhi.cn/28824.html</id>
    <published>2018-03-31T07:59:40.000Z</published>
    <updated>2018-09-28T06:50:41.575Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、实现效果"><a href="#一、实现效果" class="headerlink" title="一、实现效果"></a>一、实现效果</h2><p><blockquote class="blockquote-center"><br>本文介绍怎么在UITableViewCell中添加输入框，对于不同的row的输入框输入的文本进行获取以至于打到一个表单填写的效果。<br></blockquote><br><a id="more"></a><br><img src="http://upload-images.jianshu.io/upload_images/4905848-fbff5f76b26f5be3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图.png"></p><h2 id="二、项目结构"><a href="#二、项目结构" class="headerlink" title="二、项目结构"></a>二、项目结构</h2><p><img src="http://upload-images.jianshu.io/upload_images/4905848-89acd176adf2c7e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目结构图.png"></p><h2 id="三、代码部分"><a href="#三、代码部分" class="headerlink" title="三、代码部分"></a>三、代码部分</h2><h6 id="1-项目使用Cocoapods管理"><a href="#1-项目使用Cocoapods管理" class="headerlink" title="1. 项目使用Cocoapods管理"></a>1. 项目使用Cocoapods管理</h6><ul><li>在控制台对创建的项目进行创建pods，创建Podfile文件，使用命令vi Podfile进入到Podfile文件里面，按下键盘i进入编辑状态 </li></ul><p><img src="http://upload-images.jianshu.io/upload_images/4905848-897bd0685a5e2faf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Cocoapods.png"></p><ul><li>输入我们需要使用的第三方库，此项目中使用了Masonry来进行适配</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">platform :ios, &apos;8.0&apos;</span><br><span class="line">target &apos;InputInfoDemo&apos; do</span><br><span class="line">pod &apos;Masonry&apos;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li>在写好上一步的代码后，按<code>ESC</code>,然后输入<code>:wq</code>回车退出编辑状态 </li></ul><p><img src="http://upload-images.jianshu.io/upload_images/4905848-afd2b0d254db2f83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="退出编辑.png"></p><ul><li>使用命令<code>pod instal</code>进行第三方库安装，当出现以下内容的时候表示你已经装好Masonry了<br>######2.创建需要显示的自定义UITableViewCell<br><code>**.h文件**</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">//  InputStrTableViewCell.h</span><br><span class="line">//</span><br><span class="line">//  Created by Jackeroo on 2017/5/27.</span><br><span class="line">//  Copyright © 2017年 Jackeroo. All rights reserved.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">#import &lt;UIKit/UIKit.h&gt;</span><br><span class="line">@interface InputStrTableViewCell : UITableViewCell</span><br><span class="line">@property (nonatomic, strong) UITextField *textField;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 设置cell信息</span><br><span class="line"></span><br><span class="line"> @param title cell左侧标题</span><br><span class="line"> @param desc  占位文字信息</span><br><span class="line"> @param type 键盘类型  0、表示正常键盘 1、表示数字键盘</span><br><span class="line"> @param text 填充文字</span><br><span class="line"> @param textFieldBlock 输入内容回调</span><br><span class="line"> */</span><br><span class="line">-(void)setCellInfo:(NSString*)title withInputDesc:(NSString*)desc withKeybordType:(NSInteger )type withText:(NSString *)text WithReturnBlock:(void (^)(NSString *result))textFieldBlock;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></li></ul><p><code>**.m文件**</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">//  InputStrTableViewCell.m</span><br><span class="line">//</span><br><span class="line">//  Created by Jackeroo on 2017/5/27.</span><br><span class="line">//  Copyright © 2017年 Jackeroo. All rights reserved.</span><br><span class="line">//</span><br><span class="line">//  颜色</span><br><span class="line">#define RGBA(r,g,b,a)     [UIColor colorWithRed:(r)/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:a]</span><br><span class="line">#import &quot;InputStrTableViewCell.h&quot;</span><br><span class="line">#import &quot;Masonry.h&quot;</span><br><span class="line">#import &quot;View+MASShorthandAdditions.h&quot;</span><br><span class="line"></span><br><span class="line">@interface InputStrTableViewCell()&lt;UITextFieldDelegate&gt;</span><br><span class="line">//  标题Label</span><br><span class="line">@property (nonatomic, strong) UILabel *titleLabel;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation InputStrTableViewCell&#123;</span><br><span class="line">//  输入回调</span><br><span class="line">     void (^_block)(NSString *inputResult);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)awakeFromNib &#123;</span><br><span class="line">    [super awakeFromNib];</span><br><span class="line">    // Initialization code</span><br><span class="line">&#125;</span><br><span class="line">//  初始化</span><br><span class="line">- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier &#123;</span><br><span class="line">    self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        self.backgroundColor =RGBA(242, 242, 242, 1);</span><br><span class="line">        self.selectionStyle = UITableViewCellSelectionStyleNone;</span><br><span class="line">        self.titleLabel = [[UILabel alloc] init];</span><br><span class="line">        self.titleLabel.font =[UIFont systemFontOfSize:14];</span><br><span class="line">        self.titleLabel.textColor = [UIColor blackColor];</span><br><span class="line"></span><br><span class="line">        self.textField = [[UITextField alloc] init];</span><br><span class="line">        self.textField.font = [UIFont systemFontOfSize:12];</span><br><span class="line">        self.textField.textColor = [UIColor grayColor];</span><br><span class="line">        self.textField.textAlignment = NSTextAlignmentRight;</span><br><span class="line">        self.textField.delegate = self;</span><br><span class="line">        self.textField.backgroundColor = [UIColor whiteColor];</span><br><span class="line">        self.textField.clearButtonMode = UITextFieldViewModeAlways;</span><br><span class="line">        //  添加输入完成会回调通知</span><br><span class="line">          [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(textFieldChanging:) name:UITextFieldTextDidChangeNotification object:self.textField];</span><br><span class="line">        [self addSubview];</span><br><span class="line">        [self autoLayout];</span><br><span class="line">        CGFloat scale = [[UIScreen mainScreen] scale];</span><br><span class="line">        CGFloat width = scale &gt; 0.0 ? 1.0 / scale : 1.0;</span><br><span class="line">        self.layer.borderWidth = width;</span><br><span class="line">        self.layer.borderColor = [UIColor lightGrayColor].CGColor;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setFrame:(CGRect)frame</span><br><span class="line">&#123;</span><br><span class="line">    frame.origin.y -= 0.5;//整体向上 移动0.5</span><br><span class="line">    frame.size.height += 0.5;//间隔为0.5</span><br><span class="line">    [super setFrame:frame];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 添加页面</span><br><span class="line"> */</span><br><span class="line">-(void)addSubview&#123;</span><br><span class="line"></span><br><span class="line">    [self.contentView addSubview:self.titleLabel];</span><br><span class="line">    [self.contentView addSubview:self.textField];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 页面自动适配</span><br><span class="line"> */</span><br><span class="line">-(void) autoLayout&#123;</span><br><span class="line"></span><br><span class="line">    [self.titleLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make.leading.offset(12.5);</span><br><span class="line">        make.centerY.equalTo(self.contentView.mas_centerY);</span><br><span class="line">        make.width.equalTo(@100);</span><br><span class="line">        make.trailing.equalTo(self.textField.mas_leading).offset(-10);</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    [self.textField mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make.centerY.equalTo(self.contentView.mas_centerY);</span><br><span class="line">        make.trailing.offset(-10);</span><br><span class="line">        make.leading.equalTo(self.titleLabel.mas_trailing).offset(10);</span><br><span class="line">        make.top.offset(10);</span><br><span class="line">        make.bottom.offset(-10);</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">- (void)dealloc&#123;</span><br><span class="line">    [[NSNotificationCenter defaultCenter] removeObserver:self name:UITextFieldTextDidChangeNotification object:nil];</span><br><span class="line">&#125;</span><br><span class="line">-(void)textFieldChanging:(id)sender&#123;</span><br><span class="line">    if (_block) &#123;</span><br><span class="line">        _block(self.textField.text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-(void)setCellInfo:(NSString*)title withInputDesc:(NSString*)desc withKeybordType:(NSInteger)type withText:(NSString *)text WithReturnBlock:(void (^)(NSString *))textFieldBlock&#123;</span><br><span class="line">    if (type==1) &#123;</span><br><span class="line">        self.textField.keyboardType = UIKeyboardTypeNumberPad;</span><br><span class="line">    &#125;</span><br><span class="line">        _textField.text =text;</span><br><span class="line">        _textField.clearButtonMode = UITextFieldViewModeWhileEditing;</span><br><span class="line">    _block = textFieldBlock;</span><br><span class="line">    _titleLabel.text = title;</span><br><span class="line">    _textField.placeholder = desc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setSelected:(BOOL)selected animated:(BOOL)animated &#123;</span><br><span class="line">    [super setSelected:selected animated:animated];</span><br><span class="line"></span><br><span class="line">    // Configure the view for the selected state</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><h6 id="3-创建一个Info对象模型，存入所填写的内容"><a href="#3-创建一个Info对象模型，存入所填写的内容" class="headerlink" title="3.创建一个Info对象模型，存入所填写的内容"></a>3.创建一个Info对象模型，存入所填写的内容</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface Info : NSObject</span><br><span class="line">@property (nonatomic,copy) NSString *name1;</span><br><span class="line">@property (nonatomic,copy) NSString *name2;</span><br><span class="line">@property (nonatomic,copy) NSString *name3;</span><br><span class="line">@property (nonatomic,copy) NSString *name4;</span><br><span class="line">@property (nonatomic,copy) NSString *name5;</span><br><span class="line">@property (nonatomic,copy) NSString *name6;</span><br><span class="line">@property (nonatomic,copy) NSString *name7;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h6 id="4-使用方法"><a href="#4-使用方法" class="headerlink" title="4.使用方法"></a>4.使用方法</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</span><br><span class="line">      NSString  *identifier = [NSString stringWithFormat:@&quot;InputStrTableViewCellIdentifier%ld&quot;,indexPath.row];</span><br><span class="line">    InputStrTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];</span><br><span class="line">    if (!cell) &#123;</span><br><span class="line">        cell =[[InputStrTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifier];</span><br><span class="line">        Info *info = [[Info alloc] init];</span><br><span class="line">        if (indexPath.row==0) &#123;</span><br><span class="line">            [cell setCellInfo:@&quot;配偶信息：&quot; withInputDesc:info.name1&gt;0?info.name1:@&quot;请输入配偶信息&quot; withKeybordType:0 withText:@&quot;&quot; WithReturnBlock:^(NSString *result) &#123;</span><br><span class="line">                info.name1 =result;</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;else if (indexPath.row==1)&#123;</span><br><span class="line">            [cell setCellInfo:@&quot;身份证：&quot; withInputDesc:info.name2&gt;0?info.name2:@&quot;请输入身份证号码&quot; withKeybordType:1 withText:@&quot;&quot; WithReturnBlock:^(NSString *result) &#123;</span><br><span class="line">                info.name2 =result;</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;else if (indexPath.row==2)&#123;</span><br><span class="line">            [cell setCellInfo:@&quot;单位名称：&quot; withInputDesc:info.name3&gt;0?info.name3:@&quot;请输入单位名称&quot; withKeybordType:0 withText:@&quot;&quot; WithReturnBlock:^(NSString *result) &#123;</span><br><span class="line">                info.name3 =result;</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;else if (indexPath.row==3)&#123;</span><br><span class="line">            [cell setCellInfo:@&quot;所在部门：&quot; withInputDesc:info.name4&gt;0?info.name4:@&quot;请输入所在部门&quot; withKeybordType:0 withText:@&quot;&quot; WithReturnBlock:^(NSString *result) &#123;</span><br><span class="line">                info.name4 =result;</span><br><span class="line">            &#125;];</span><br><span class="line"></span><br><span class="line">        &#125;else if (indexPath.row==4)&#123;</span><br><span class="line">            [cell setCellInfo:@&quot;月均工资收入：&quot; withInputDesc:info.name5&gt;0?info.name5:@&quot;请输入月均工资收入&quot; withKeybordType:1 withText:@&quot;&quot; WithReturnBlock:^(NSString *result) &#123;</span><br><span class="line">                info.name5 =result;</span><br><span class="line">            &#125;];</span><br><span class="line"></span><br><span class="line">        &#125;else if (indexPath.row==5)&#123;</span><br><span class="line">            [cell setCellInfo:@&quot;办公室电话：&quot; withInputDesc:info.name6&gt;0?info.name6:@&quot;请输入办公室电话&quot; withKeybordType:1 withText:@&quot;&quot; WithReturnBlock:^(NSString *result) &#123;</span><br><span class="line">                info.name6 =result;</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            [cell setCellInfo:@&quot;移动电话：&quot; withInputDesc:info.name7&gt;0?info.name1:@&quot;请输入移动电话&quot; withKeybordType:1 withText:@&quot;&quot; WithReturnBlock:^(NSString *result) &#123;</span><br><span class="line">                info.name7 =result;</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return cell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：只是粗糙的实现了功能，还有部分可优化的，代码已上传Github,喜欢的欢迎star一下，以资鼓励，嘿嘿，<a href="https://github.com/chuzhaozhi/InputInfoDemo/tree/master" target="_blank" rel="noopener"> git地址 </a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、实现效果&quot;&gt;&lt;a href=&quot;#一、实现效果&quot; class=&quot;headerlink&quot; title=&quot;一、实现效果&quot;&gt;&lt;/a&gt;一、实现效果&lt;/h2&gt;&lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;本文介绍怎么在UITableViewCell中添加输入框，对于不同的row的输入框输入的文本进行获取以至于打到一个表单填写的效果。&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="UITableView" scheme="http://chuzhaozhi.cn/tags/UITableView/"/>
    
      <category term="Cocoapods" scheme="http://chuzhaozhi.cn/tags/Cocoapods/"/>
    
      <category term="cell" scheme="http://chuzhaozhi.cn/tags/cell/"/>
    
      <category term="git" scheme="http://chuzhaozhi.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>UITableViewCell高度自适应--Xib和Masonry布局</title>
    <link href="http://chuzhaozhi.cn/18602.html"/>
    <id>http://chuzhaozhi.cn/18602.html</id>
    <published>2018-03-31T07:59:40.000Z</published>
    <updated>2018-09-28T06:50:41.576Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Reveal---iOS项目UI调试工具使用教程</title>
    <link href="http://chuzhaozhi.cn/1581.html"/>
    <id>http://chuzhaozhi.cn/1581.html</id>
    <published>2018-03-31T07:59:40.000Z</published>
    <updated>2018-09-28T06:50:41.573Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Reveal介绍"><a href="#一、Reveal介绍" class="headerlink" title="一、Reveal介绍"></a>一、Reveal介绍</h3><blockquote class="blockquote-center"><p><a href="https://www.waitsun.com/tag/reveal" target="_blank" rel="noopener">Reveal</a>是Mac os平台上的一款开发者调试IOS应用的Mac[开发软件]<br>reveal Mac版它能够在运行时调试和修改iOS应用程序。Reveal能连接到应用程序，并允许开发者编辑各种用户界面参数，这反过来会立即反应在程序的UI上。<br>Reveal 在 官网售价119美元，约合人民币1280元]，（文末会给出破解版的下载地址，当然，要支持正版哟^_^）。<br></p></blockquote><br><a id="more"></a><p></p><h3 id="二、Reveal集成使用"><a href="#二、Reveal集成使用" class="headerlink" title="二、Reveal集成使用"></a>二、Reveal集成使用</h3><h4 id="1、下载安装Reveal，直接安装。"><a href="#1、下载安装Reveal，直接安装。" class="headerlink" title="1、下载安装Reveal，直接安装。"></a>1、下载安装Reveal，直接安装。</h4><p>如果提示<code>xxx.app文件损坏打不开</code>，请参考我的另一篇<a href="http://chuzhaozhi.cn/2018/03/31/xxx-app%E6%96%87%E4%BB%B6%E5%B7%B2%E6%8D%9F%E5%9D%8F%EF%BC%8C%E6%89%93%E4%B8%8D%E5%BC%80%EF%BC%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/#more">文章</a>解决，这里了就不多说了。</p><h4 id="2、找到你刚才安装的软件-打开"><a href="#2、找到你刚才安装的软件-打开" class="headerlink" title="2、找到你刚才安装的软件,打开"></a>2、找到你刚才安装的软件,打开</h4><p><img src="http://upload-images.jianshu.io/upload_images/4905848-9ef5178304ab70c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Reveal.png"><br>主界面显示如下图</p><p><img src="http://upload-images.jianshu.io/upload_images/4905848-5ab31e4993b225ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="主界面.png"></p><h4 id="3、在你的项目中集成"><a href="#3、在你的项目中集成" class="headerlink" title="3、在你的项目中集成"></a>3、在你的项目中集成</h4><p>（1）创建一个名为<code>RevealTestDemo</code>的项目,导入<code>CocoPods</code>,打开Podfile文件输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//  :configurations =&gt; [&apos;Debug&apos;] 只是在xcode debug 时才会加入；</span><br><span class="line">pod &apos;Reveal-SDK&apos;, :git =&gt; &apos;https://git.coding.net/kakukeme/Reveal-SDK.git&apos;, :configurations =&gt; [&apos;Debug&apos;]</span><br></pre></td></tr></table></figure></p><p>（2）、Xcode打开项目，并运行</p><p><img src="http://upload-images.jianshu.io/upload_images/4905848-ab5f4ccce6e06c37.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="打开项目.png"><br>在界面上添加一个背景颜色为红色的label,这个时候打开Reveal,你就能看到<br><img src="http://upload-images.jianshu.io/upload_images/4905848-5080ff146bb62a15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Reveal.png"><br>点击进入就能看到</p><p><img src="http://upload-images.jianshu.io/upload_images/4905848-783e725d694cae8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="展示UI图层.png"></p><h4 id="4、功能分析"><a href="#4、功能分析" class="headerlink" title="4、功能分析"></a>4、功能分析</h4><p>窗口介绍<br><img src="http://upload-images.jianshu.io/upload_images/4905848-0ef67c408ccfb3ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="窗口.png"><br>点击一个控件之后进入这个子控件的详细信息</p><p><img src="http://upload-images.jianshu.io/upload_images/4905848-7aa0012133378bfc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Details.png"></p><p>在属性窗口里面我们能很清晰的看见这个控件的相关信息，包括Frame等，同时你还可以直接在属性面板进行修改控件的信息</p><p>修改前<br><img src="http://upload-images.jianshu.io/upload_images/4905848-7af86d070fd1633d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改前.png"><br>修改后</p><p><img src="http://upload-images.jianshu.io/upload_images/4905848-636e084f267ce18b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改后.png"><br>是不是很方便，修改字体、颜色、大小、对齐方式等都可以在属性面板进行操作，很直观的看到修改后的效果，不幸的是，你项目中的代码还需要自己去修改（据说后期版本会有对这一方面的修改，期待ing）。<a href="https://github.com/chuzhaozhi/RevealTestDemo" target="_blank" rel="noopener">本文Demo地址</a>,Reveal<a href="https://pan.baidu.com/s/1jHYekyM" target="_blank" rel="noopener">下载地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、Reveal介绍&quot;&gt;&lt;a href=&quot;#一、Reveal介绍&quot; class=&quot;headerlink&quot; title=&quot;一、Reveal介绍&quot;&gt;&lt;/a&gt;一、Reveal介绍&lt;/h3&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://www.waitsun.com/tag/reveal&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Reveal&lt;/a&gt;是Mac os平台上的一款开发者调试IOS应用的Mac[开发软件]&lt;br&gt;reveal Mac版它能够在运行时调试和修改iOS应用程序。Reveal能连接到应用程序，并允许开发者编辑各种用户界面参数，这反过来会立即反应在程序的UI上。&lt;br&gt;Reveal 在 官网售价119美元，约合人民币1280元]，（文末会给出破解版的下载地址，当然，要支持正版哟^_^）。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Charles抓包+Postman模拟请求</title>
    <link href="http://chuzhaozhi.cn/54645.html"/>
    <id>http://chuzhaozhi.cn/54645.html</id>
    <published>2018-03-31T07:59:40.000Z</published>
    <updated>2018-09-28T06:50:41.571Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、工具介绍"><a href="#一、工具介绍" class="headerlink" title="一、工具介绍"></a>一、工具介绍</h4><h5 id="1-Charles"><a href="#1-Charles" class="headerlink" title="1. Charles"></a>1. Charles</h5><p><blockquote class="blockquote-center"><br>今天来介绍一下Mac上抓包工具<a href="https://www.charlesproxy.com/" target="_blank" rel="noopener">Charles(又称为青花瓷)</a>，官网可以下载，但是需要破解之后才能永久使用，当然，可以有30天试用期，具体的使用方法在此就不进行一一介绍了，如有需要再补上。（ps:破解版<a href="https://pan.baidu.com/s/1pMawsEv" target="_blank" rel="noopener">下载地址</a>密码:meuk)。<br></blockquote><br><a id="more"></a><br><img src="http://upload-images.jianshu.io/upload_images/4905848-fc2e807fca9adfe2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="charles.png"></p><h5 id="2-Postman"><a href="#2-Postman" class="headerlink" title="2.Postman"></a>2.Postman</h5><p>Postman是一种网页调试与发送网页http请求的chrome插件。我们可以用来很方便的模拟get或者post或者其他方式的请求来调试接口。<a href="https://app.getpostman.com/app/download/osx64" target="_blank" rel="noopener">点击下载</a><br><img src="http://upload-images.jianshu.io/upload_images/4905848-a010b13e92458678.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="postman.png"></p><h2 id="二、开始抓取网络接口以及模拟请求"><a href="#二、开始抓取网络接口以及模拟请求" class="headerlink" title="二、开始抓取网络接口以及模拟请求"></a>二、开始抓取网络接口以及模拟请求</h2><h5 id="第一步、打开Charles-在浏览器中输入需要请求的地址，我这里访问的是一个投票的接口"><a href="#第一步、打开Charles-在浏览器中输入需要请求的地址，我这里访问的是一个投票的接口" class="headerlink" title="第一步、打开Charles,在浏览器中输入需要请求的地址，我这里访问的是一个投票的接口"></a>第一步、打开Charles,在浏览器中输入需要请求的地址，我这里访问的是一个投票的接口</h5><h4 id="显示信息如下："><a href="#显示信息如下：" class="headerlink" title="显示信息如下："></a>显示信息如下：<img src="http://upload-images.jianshu.io/upload_images/4905848-1941e097e68ccc12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="headers.png"></h4><h4 id="cookie信息："><a href="#cookie信息：" class="headerlink" title="cookie信息："></a>cookie信息：<img src="http://upload-images.jianshu.io/upload_images/4905848-bac60fa4b21b0bfd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cookie.png"></h4><h4 id="参数信息："><a href="#参数信息：" class="headerlink" title="参数信息："></a>参数信息：</h4><p><img src="http://upload-images.jianshu.io/upload_images/4905848-64cc5a34eac55cb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="参数.png"></p><h5 id="第二步、在第一步获取了请求的url、cookie、参数等请求需要的之后我们就可以打开Postman来进行模拟请求了。"><a href="#第二步、在第一步获取了请求的url、cookie、参数等请求需要的之后我们就可以打开Postman来进行模拟请求了。" class="headerlink" title="第二步、在第一步获取了请求的url、cookie、参数等请求需要的之后我们就可以打开Postman来进行模拟请求了。"></a>第二步、在第一步获取了请求的url、cookie、参数等请求需要的之后我们就可以打开Postman来进行模拟请求了。<img src="http://upload-images.jianshu.io/upload_images/4905848-eebf7859754b3cf4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="postman.png"></h5><h4 id="配置信息如下："><a href="#配置信息如下：" class="headerlink" title="配置信息如下："></a>配置信息如下：<img src="http://upload-images.jianshu.io/upload_images/4905848-a8ff62cecd37f3bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置信息.png"></h4><h4 id="body参数："><a href="#body参数：" class="headerlink" title="body参数："></a>body参数：<img src="http://upload-images.jianshu.io/upload_images/4905848-2c4f00b32aec26e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="body.png"></h4><h5 id="第三步、发送请求，看到后台返回的信息"><a href="#第三步、发送请求，看到后台返回的信息" class="headerlink" title="第三步、发送请求，看到后台返回的信息"></a>第三步、发送请求，看到后台返回的信息<img src="http://upload-images.jianshu.io/upload_images/4905848-84ebf0154dd6c623.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果.png"></h5><p>到这里这个请求接口的操作就模拟成功了，既然参数和地址都有了，这个时候就是你想做什么就做什么的时候了，你懂得😆。<br><img src="http://upload-images.jianshu.io/upload_images/4905848-edfe3a61d514a92a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="app.png"></p><p>这是根据postman请求结果，自己随便写了个手机端来进行请求的，有兴趣的可以一起研究，欢迎骚扰。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、工具介绍&quot;&gt;&lt;a href=&quot;#一、工具介绍&quot; class=&quot;headerlink&quot; title=&quot;一、工具介绍&quot;&gt;&lt;/a&gt;一、工具介绍&lt;/h4&gt;&lt;h5 id=&quot;1-Charles&quot;&gt;&lt;a href=&quot;#1-Charles&quot; class=&quot;headerlink&quot; title=&quot;1. Charles&quot;&gt;&lt;/a&gt;1. Charles&lt;/h5&gt;&lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;今天来介绍一下Mac上抓包工具&lt;a href=&quot;https://www.charlesproxy.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Charles(又称为青花瓷)&lt;/a&gt;，官网可以下载，但是需要破解之后才能永久使用，当然，可以有30天试用期，具体的使用方法在此就不进行一一介绍了，如有需要再补上。（ps:破解版&lt;a href=&quot;https://pan.baidu.com/s/1pMawsEv&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载地址&lt;/a&gt;密码:meuk)。&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="IT技能" scheme="http://chuzhaozhi.cn/categories/IT%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="抓包" scheme="http://chuzhaozhi.cn/tags/%E6%8A%93%E5%8C%85/"/>
    
      <category term="Charles" scheme="http://chuzhaozhi.cn/tags/Charles/"/>
    
      <category term="Postman" scheme="http://chuzhaozhi.cn/tags/Postman/"/>
    
  </entry>
  
</feed>
